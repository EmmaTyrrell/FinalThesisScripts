# script that will be the forecast

# import modules
import time
import arcpy
from arcpy.sa import *
from datetime import timedelta
from datetime import datetime as dt
import math
import os
start = time.time()
print("modules imported")

# establish master parameters
print("establishing parameters ... ")
arcpy.env.workspace = "C:\\Users\\Emma Tyrrell\\Documents\\PSU_SDS\\THESIS_230226\\Data\\WorkingData"
gdbName = "C:\\Users\\Emma Tyrrell\\Documents\\PSU_SDS\\THESIS_230226\\Data\\StaticDataGDB.gdb"
avyGDB = "C:\\Users\\Emma Tyrrell\\Documents\\PSU_SDS\\THESIS_230226\\Data\\WorkingData\\AvalancheFiles.gdb"
HRRRData = "C:\\Users\\Emma Tyrrell\\Documents\\PSU_SDS\\THESIS_230226\\Data\\WorkingData\\HRRRData"
forecastingWorkspace = arcpy.env.workspace + "\\ForecastingData"
GCSsr = arcpy.SpatialReference(4326)
PCSsr = arcpy.SpatialReference(6431)
arcpy.env.overwriteOutput = True
arcpy.env.qualifiedFieldNames = False
UTCtimeConversion = timedelta(hours=-7)
forSharing = "C:\\Users\\Emma Tyrrell\\Documents\\PSU_SDS\\THESIS_230226\\Data\\WorkingData\\ForSharing"
avalanchePolygonPaths = "C:\\Users\\Emma Tyrrell\\Documents\\PSU_SDS\\THESIS_230226\\Data\\WorkingData\\AvalancheFiles.gdb\\AvyPathPolygon_Point"
AvyPaths = "C:\\Users\\Emma Tyrrell\\Documents\\PSU_SDS\\THESIS_230226\\Data\\WorkingData\\AvalancheFiles.gdb\\AvyPathPolygons"
demMosaic = gdbName + "\\demMosaic2"
print("parameters established.")

print("trying Feb. 3, 2023")
try:
    # sample variables
    date = "2023-02-03"
    date_object = dt.strptime(date, "%Y-%m-%d")
    startPoint = date_object + UTCtimeConversion
    endDay0 = startPoint + timedelta(days=1)
    startDay1 = startPoint + timedelta(days=-1)
    startDay2 = startPoint + timedelta(days=-2)
    startDay3 = startPoint + timedelta(days=-3)
    startDay4 = startPoint + timedelta(days=-4)
    startDay5 = startPoint + timedelta(days=-5)
    startDay6 = startPoint + timedelta(days=-6)
    startDay7 = startPoint + timedelta(days=-7)
    startPoint_HRRR = (str(startPoint).replace(" ", "T"))
    endDay0_HRRR = (str(endDay0).replace(" ", "T"))
    startDay1_HRRR = (str(startDay1).replace(" ", "T"))
    startDay2_HRRR = (str(startDay2).replace(" ", "T"))
    startDay3_HRRR = (str(startDay3).replace(" ", "T"))
    startDay4_HRRR = (str(startDay4).replace(" ", "T"))
    startDay5_HRRR = (str(startDay5).replace(" ", "T"))
    startDay6_HRRR = (str(startDay6).replace(" ", "T"))
    startDay7_HRRR = (str(startDay7).replace(" ", "T"))
    print("date prepared for sampling")

    arcpy.CreateFileGDB_management("C:\\Users\\Emma Tyrrell\\Documents\\PSU_SDS\\THESIS_230226\\Data\\WorkingData",
                                   f"Forecast_{date}v2.gdb")

    forecastGDB = ("C:\\Users\\Emma Tyrrell\\Documents\\PSU_SDS\\THESIS_230226\\Data\\WorkingData\\" + f"Forecast_{date}v2.gdb")


    print("delete classes workspace")

    print("getting unfiltered data")
    try:
        # snow sum
        try:
            # sample day of
            Sample(HRRRData + "\\2023\\2023snowSumAggregate.crf", avalanchePolygonPaths,
                   forecastGDB + "\\SnowSample_day0",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f"StdTime {startPoint_HRRR} {endDay0_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowSample_day0", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowSample_day0", "asnow_sfc", "asnow_D0", "asnow_D0")
            print("day 0 snow sampled")

            # sample day 1
            Sample(HRRRData + "\\2023\\2023snowSumAggregate.crf", avalanchePolygonPaths,
                   forecastGDB + "\\SnowSample_day1",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f'StdTime {startDay1_HRRR} {startPoint_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowSample_day1", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowSample_day1", "asnow_sfc", "asnow_D1", "asnow_D1")
            print("day 1 snow sampled")

            # sample day 2 out
            Sample(HRRRData + "\\2023\\2023snowSumAggregate.crf", avalanchePolygonPaths,
                   forecastGDB + "\\SnowSample_day2",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f'StdTime {startDay2_HRRR} {startDay1_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowSample_day2", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowSample_day2", "asnow_sfc", "asnow_D2", "asnow_D2")
            print("day 2 snow sampled")

            # sample day 3 out
            Sample(HRRRData + "\\2023\\2023snowSumAggregate.crf", avalanchePolygonPaths,
                   forecastGDB + "\\SnowSample_day3",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f'StdTime {startDay3_HRRR} {startDay2_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowSample_day3", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowSample_day3", "asnow_sfc", "asnow_D3", "asnow_D3")
            print("day 3 snow sampled")

            # sample day 4 out
            Sample(HRRRData + "\\2023\\2023snowSumAggregate.crf", avalanchePolygonPaths,
                   forecastGDB + "\\SnowSample_day4",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f'StdTime {startDay4_HRRR} {startDay3_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowSample_day4", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowSample_day4", "asnow_sfc", "asnow_D4", "asnow_D4")
            print("day 4 snow sampled")

            # sample day 5 out
            Sample(HRRRData + "\\2023\\2023snowSumAggregate.crf", avalanchePolygonPaths,
                   forecastGDB + "\\SnowSample_day5",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f'StdTime {startDay5_HRRR} {startDay4_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowSample_day5", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowSample_day5", "asnow_sfc", "asnow_D5", "asnow_D5")
            print("day 5 snow sampled")

            # sample day 6 out
            Sample(HRRRData + "\\2023\\2023snowSumAggregate.crf", avalanchePolygonPaths,
                   forecastGDB + "\\SnowSample_day6",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f'StdTime {startDay6_HRRR} {startDay5_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowSample_day6", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowSample_day6", "asnow_sfc", "asnow_D6", "asnow_D6")
            print("day 6 snow sampled")

            # sample day 7 out
            Sample(HRRRData + "\\2023\\2023snowSumAggregate.crf ", avalanchePolygonPaths,
                   forecastGDB + "\\SnowSample_day7",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f'StdTime {startDay7_HRRR} {startDay6_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowSample_day7", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            arcpy.AlterField_management(forecastGDB + "\\SnowSample_day7", "asnow_sfc", "asnow_D7", "asnow_D7")
            print("day 7 snow sampled")

            # merge all files and delete intermediaries
            arcpy.CopyFeatures_management(forecastGDB + "\\SnowSample_day0", forecastGDB + "\\snowData_All")
            print("field copied")

            # add fields
            arcpy.JoinField_management(forecastGDB + "\\snowData_All", "pathCode", forecastGDB + "\\SnowSample_day1",
                                       "pathCode", "asnow_D1")
            arcpy.JoinField_management(forecastGDB + "\\snowData_All", "pathCode", forecastGDB + "\\SnowSample_day2",
                                       "pathCode", "asnow_D2")
            arcpy.JoinField_management(forecastGDB + "\\snowData_All", "pathCode", forecastGDB + "\\SnowSample_day3",
                                       "pathCode", "asnow_D3")
            arcpy.JoinField_management(forecastGDB + "\\snowData_All", "pathCode", forecastGDB + "\\SnowSample_day4",
                                       "pathCode", "asnow_D4")
            arcpy.JoinField_management(forecastGDB + "\\snowData_All", "pathCode", forecastGDB + "\\SnowSample_day5",
                                       "pathCode", "asnow_D5")
            arcpy.JoinField_management(forecastGDB + "\\snowData_All", "pathCode", forecastGDB + "\\SnowSample_day6",
                                       "pathCode", "asnow_D6")
            arcpy.JoinField_management(forecastGDB + "\\snowData_All", "pathCode", forecastGDB + "\\SnowSample_day7",
                                       "pathCode", "asnow_D7")
            print("files merged")
            arcpy.Delete_management([forecastGDB + "\\SnowSample_day0", forecastGDB + "\\SnowSample_day1",
                                     forecastGDB + "\\SnowSample_day2", forecastGDB + "\\SnowSample_day3",
                                     forecastGDB + "\\SnowSample_day4", forecastGDB + "\\SnowSample_day5",
                                     forecastGDB + "\\SnowSample_day6", forecastGDB + "\\SnowSample_day7"])
            print("intermediary files deleted")
        except Exception as ex:
            print(ex)

        print('starting on wind direction and aspect analysis')
        # sample the paths on wind direction
        try:
            Sample(HRRRData + "\\2023\\2023windDirecMeanAggregate_Z10.crf", forecastGDB + "\\snowData_All",
                   forecastGDB + "\\windDirSample_day0",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f"StdTime {startPoint_HRRR} {endDay0_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\windDirSample_day0", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # add field
            arcpy.AddField_management(forecastGDB + "\\windDirSample_day0", "windDir_D0", "DOUBLE",
                                      "", "", "", "windDir_D0")
            with arcpy.da.UpdateCursor(forecastGDB + "\\windDirSample_day0",
                                       ["ugrd_htgl", "vgrd_htgl", "windDir_D0"]) as cursor:
                for row in cursor:
                    row[2] = 57.29578 * (math.atan2(float(row[0]), float(row[1]))) + 180
                    cursor.updateRow(row)
            print("day 0 wind direction calculated")

            # sample day 1
            Sample(HRRRData + "\\2023\\2023windDirecMeanAggregate_Z10.crf", forecastGDB + "\\snowData_All",
                   forecastGDB + "\\windDirSample_day1",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f"StdTime {startDay1_HRRR} {startPoint_HRRR}", "MEAN", "",
                   "", "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\windDirSample_day1", "OBJECTID", avalanchePolygonPaths,
                                       "OBJECTID",
                                       "pathCode")
            # add field
            arcpy.AddField_management(forecastGDB + "\\windDirSample_day1", "windDir_D1", "DOUBLE",
                                      "", "", "", "windDir_D1")
            # calculate wind direction
            with arcpy.da.UpdateCursor(forecastGDB + "\\windDirSample_day1",
                                       ["ugrd_htgl", "vgrd_htgl", "windDir_D1"]) as cursor:
                for row in cursor:
                    row[2] = 57.29578 * (math.atan2(float(row[0]), float(row[1]))) + 180
                    cursor.updateRow(row)
            print("day 1 wind direction calculated")

            # sample day 2
            Sample(HRRRData + "\\2023\\2023windDirecMeanAggregate_Z10.crf", forecastGDB + "\\snowData_All",
                   forecastGDB + "\\windDirSample_day2",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f"StdTime {startDay2_HRRR} {startDay1_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\windDirSample_day2", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # add field
            arcpy.AddField_management(forecastGDB + "\\windDirSample_day2", "windDir_D2", "DOUBLE", "", "", "",
                                      "windDir_D2")
            # calculate wind direction
            with arcpy.da.UpdateCursor(forecastGDB + "\\windDirSample_day2",
                                       ["ugrd_htgl", "vgrd_htgl", "windDir_D2"]) as cursor:
                for row in cursor:
                    row[2] = 57.29578 * (math.atan2(float(row[0]), float(row[1]))) + 180
                    cursor.updateRow(row)
            print("day 2 wind direction calculated")

            # sample day 3
            Sample(HRRRData + "\\2023\\2023windDirecMeanAggregate_Z10.crf", forecastGDB + "\\snowData_All",
                   forecastGDB + "\\windDirSample_day3",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f"StdTime {startDay3_HRRR} {startDay2_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\windDirSample_day3", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # add field
            arcpy.AddField_management(forecastGDB + "\\windDirSample_day3", "windDir_D3", "DOUBLE", "", "", "",
                                      "windDir_D3")
            # calculate wind direction
            with arcpy.da.UpdateCursor(forecastGDB + "\\windDirSample_day3",
                                       ["ugrd_htgl", "vgrd_htgl", "windDir_D3"]) as cursor:
                for row in cursor:
                    row[2] = 57.29578 * (math.atan2(float(row[0]), float(row[1]))) + 180
                    cursor.updateRow(row)
            print("day 3 wind direction calculated")

            # sample day 4
            Sample(HRRRData + "\\2023\\2023windDirecMeanAggregate_Z10.crf", forecastGDB + "\\snowData_All",
                   forecastGDB + "\\windDirSample_day4",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f"StdTime {startDay4_HRRR} {startDay3_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\windDirSample_day4", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # add field
            arcpy.AddField_management(forecastGDB + "\\windDirSample_day4", "windDir_D4", "DOUBLE", "", "", "",
                                      "windDir_D4")
            # calculate wind direction
            with arcpy.da.UpdateCursor(forecastGDB + "\\windDirSample_day4",
                                       ["ugrd_htgl", "vgrd_htgl", "windDir_D4"]) as cursor:
                for row in cursor:
                    row[2] = 57.29578 * (math.atan2(float(row[0]), float(row[1]))) + 180
                    cursor.updateRow(row)
            print("day 4 wind direction calculated")

            # sample day 5
            Sample(HRRRData + "\\2023\\2023windDirecMeanAggregate_Z10.crf", forecastGDB + "\\snowData_All",
                   forecastGDB + "\\windDirSample_day5",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f"StdTime {startDay5_HRRR} {startDay4_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\windDirSample_day5", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # add field
            arcpy.AddField_management(forecastGDB + "\\windDirSample_day5", "windDir_D5", "DOUBLE", "", "", "",
                                      "windDir_D5")
            # calculate wind direction
            with arcpy.da.UpdateCursor(forecastGDB + "\\windDirSample_day5",
                                       ["ugrd_htgl", "vgrd_htgl", "windDir_D5"]) as cursor:
                for row in cursor:
                    row[2] = 57.29578 * (math.atan2(float(row[0]), float(row[1]))) + 180
                    cursor.updateRow(row)
            print("day 5 wind direction calculated")

            # sample day 6
            Sample(HRRRData + "\\2023\\2023windDirecMeanAggregate_Z10.crf", forecastGDB + "\\snowData_All",
                   forecastGDB + "\\windDirSample_day6",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f"StdTime {startDay6_HRRR} {startDay5_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\windDirSample_day6", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # add field
            arcpy.AddField_management(forecastGDB + "\\windDirSample_day6", "windDir_D6", "DOUBLE", "", "", "",
                                      "windDir_D6")
            # calculate wind direction
            with arcpy.da.UpdateCursor(forecastGDB + "\\windDirSample_day6",
                                       ["ugrd_htgl", "vgrd_htgl", "windDir_D6"]) as cursor:
                for row in cursor:
                    row[2] = 57.29578 * (math.atan2(float(row[0]), float(row[1]))) + 180
                    cursor.updateRow(row)
            print("day 6 wind direction calculated")

            # sample day 7
            Sample(HRRRData + "\\2023\\2023windDirecMeanAggregate_Z10.crf", forecastGDB + "\\snowData_All",
                   forecastGDB + "\\windDirSample_day7",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f"StdTime {startDay7_HRRR} {startDay6_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\windDirSample_day7", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # add field
            arcpy.AddField_management(forecastGDB + "\\windDirSample_day7", "windDir_D7", "DOUBLE", "", "", "",
                                      "windDir_D7")
            # calculate wind direction
            with arcpy.da.UpdateCursor(forecastGDB + "\\windDirSample_day7",
                                       ["ugrd_htgl", "vgrd_htgl", "windDir_D7"]) as cursor:
                for row in cursor:
                    row[2] = 57.29578 * (math.atan2(float(row[0]), float(row[1]))) + 180
                    cursor.updateRow(row)
            print("day 7 wind direction calculated")

            # merge all files and delete intermediaries
            arcpy.CopyFeatures_management(forecastGDB + "\\snowData_All", forecastGDB + "\\WindDirData_All")
            print("field copied")

            # add fields
            arcpy.JoinField_management(forecastGDB + "\\WindDirData_All", "pathCode", forecastGDB + "\\windDirSample_day0",
                                       "pathCode", "windDir_D0")
            arcpy.JoinField_management(forecastGDB + "\\WindDirData_All", "pathCode", forecastGDB + "\\windDirSample_day1",
                                       "pathCode", "windDir_D1")
            arcpy.JoinField_management(forecastGDB + "\\WindDirData_All", "pathCode", forecastGDB + "\\windDirSample_day2",
                                       "pathCode", "windDir_D2")
            arcpy.JoinField_management(forecastGDB + "\\WindDirData_All", "pathCode", forecastGDB + "\\windDirSample_day3",
                                       "pathCode", "windDir_D3")
            arcpy.JoinField_management(forecastGDB + "\\WindDirData_All", "pathCode", forecastGDB + "\\windDirSample_day4",
                                       "pathCode", "windDir_D4")
            arcpy.JoinField_management(forecastGDB + "\\WindDirData_All", "pathCode", forecastGDB + "\\windDirSample_day5",
                                       "pathCode", "windDir_D5")
            arcpy.JoinField_management(forecastGDB + "\\WindDirData_All", "pathCode", forecastGDB + "\\windDirSample_day6",
                                       "pathCode", "windDir_D6")
            arcpy.JoinField_management(forecastGDB + "\\WindDirData_All", "pathCode", forecastGDB + "\\windDirSample_day7",
                                       "pathCode", "windDir_D7")
            print("files merged")

            arcpy.Delete_management([forecastGDB + "\\windDirSample_day0", forecastGDB + "\\windDirSample_day1",
                                     forecastGDB + "\\windDirSample_day2", forecastGDB + "\\windDirSample_day3",
                                     forecastGDB + "\\windDirSample_day4", forecastGDB + "\\windDirSample_day5",
                                     forecastGDB + "\\windDirSample_day6", forecastGDB + "\\windDirSample_day7"])
            print("intermediary files deleted")
        except Exception as ex:
            print(ex)

        print("analyzing wind data")
        # wind data
        try:
            # sample day of
            Sample(HRRRData + "\\2023\\2023windMeanAggregate.crf", forecastGDB + "\\WindDirData_All",
                   forecastGDB + "\\WindSample_day0",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f"StdTime {startPoint_HRRR} {endDay0_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\WindSample_day0", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\WindSample_day0", "wind_htgl", "wind_D0", "wind_D0")
            print("day 0 wind sampled")

            # sample day 1
            Sample(HRRRData + "\\2023\\2023windMeanAggregate.crf", forecastGDB + "\\WindDirData_All",
                   forecastGDB + "\\WindSample_day1",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f"StdTime {startDay1_HRRR} {startPoint_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\WindSample_day1", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\WindSample_day1", "wind_htgl", "wind_D1", "wind_D1")
            print("day 1 wind sampled")

            # sample day 2
            Sample(HRRRData + "\\2023\\2023windMeanAggregate.crf", forecastGDB + "\\WindDirData_All",
                   forecastGDB + "\\WindSample_day2",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f"StdTime {startDay2_HRRR} {startDay1_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\WindSample_day2", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\WindSample_day2", "wind_htgl", "wind_D2", "wind_D2")
            print("day 2 wind sampled")

            # sample day 3
            Sample(HRRRData + "\\2023\\2023windMeanAggregate.crf", forecastGDB + "\\WindDirData_All",
                   forecastGDB + "\\WindSample_day3",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f"StdTime {startDay3_HRRR} {startDay2_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\WindSample_day3", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\WindSample_day3", "wind_htgl", "wind_D3", "wind_D3")
            print("day 3 wind sampled")

            # sample day 4
            Sample(HRRRData + "\\2023\\2023windMeanAggregate.crf", forecastGDB + "\\WindDirData_All",
                   forecastGDB + "\\WindSample_day4",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f"StdTime {startDay4_HRRR} {startDay3_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\WindSample_day4", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\WindSample_day4", "wind_htgl", "wind_D4", "wind_D4")
            print("day 4 wind sampled")

            # sample day 5
            Sample(HRRRData + "\\2023\\2023windMeanAggregate.crf", forecastGDB + "\\WindDirData_All",
                   forecastGDB + "\\WindSample_day5",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f"StdTime {startDay5_HRRR} {startDay4_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\WindSample_day5", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\WindSample_day5", "wind_htgl", "wind_D5", "wind_D5")
            print("day 5 wind sampled")

            # sample day 6
            Sample(HRRRData + "\\2023\\2023windMeanAggregate.crf", forecastGDB + "\\WindDirData_All",
                   forecastGDB + "\\WindSample_day6",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f"StdTime {startDay6_HRRR} {startDay5_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\WindSample_day6", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\WindSample_day6", "wind_htgl", "wind_D6", "wind_D6")
            print("day 6 wind sampled")

            # sample day 7
            Sample(HRRRData + "\\2023\\2023windMeanAggregate.crf", forecastGDB + "\\WindDirData_All",
                   forecastGDB + "\\WindSample_day7",
                   "NEAREST", "OBJECTID", "ALL_SLICES", f"StdTime {startDay7_HRRR} {startDay6_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\WindSample_day7", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\WindSample_day7", "wind_htgl", "wind_D7", "wind_D7")
            print("day 7 wind sampled")

            # merge all files and delete intermediaries
            arcpy.CopyFeatures_management(forecastGDB + "\\WindDirData_All", forecastGDB + "\\WindSpeed_DataAll")
            print("field copied")

            # add fields
            arcpy.JoinField_management(forecastGDB + "\\WindSpeed_DataAll", "pathCode",
                                       forecastGDB + "\\WindSample_day0",
                                       "pathCode", "wind_D0")
            arcpy.JoinField_management(forecastGDB + "\\WindSpeed_DataAll", "pathCode",
                                       forecastGDB + "\\WindSample_day1",
                                       "pathCode", "wind_D1")
            arcpy.JoinField_management(forecastGDB + "\\WindSpeed_DataAll", "pathCode",
                                       forecastGDB + "\\WindSample_day2",
                                       "pathCode", "wind_D2")
            arcpy.JoinField_management(forecastGDB + "\\WindSpeed_DataAll", "pathCode",
                                       forecastGDB + "\\WindSample_day3",
                                       "pathCode", "wind_D3")
            arcpy.JoinField_management(forecastGDB + "\\WindSpeed_DataAll", "pathCode",
                                       forecastGDB + "\\WindSample_day4",
                                       "pathCode", "wind_D4")
            arcpy.JoinField_management(forecastGDB + "\\WindSpeed_DataAll", "pathCode",
                                       forecastGDB + "\\WindSample_day5",
                                       "pathCode", "wind_D5")
            arcpy.JoinField_management(forecastGDB + "\\WindSpeed_DataAll", "pathCode",
                                       forecastGDB + "\\WindSample_day6",
                                       "pathCode", "wind_D6")
            arcpy.JoinField_management(forecastGDB + "\\WindSpeed_DataAll", "pathCode",
                                       forecastGDB + "\\WindSample_day7",
                                       "pathCode", "wind_D7")
            print("files merged")

            arcpy.Delete_management([forecastGDB + "\\WindSample_day0", forecastGDB + "\\WindSample_day1",
                                     forecastGDB + "\\WindSample_day2", forecastGDB + "\\WindSample_day3",
                                     forecastGDB + "\\WindSample_day4", forecastGDB + "\\WindSample_day5",
                                     forecastGDB + "\\WindSample_day6", forecastGDB + "\\WindSample_day7"])
        except Exception as ex:
            print(ex)

        print("analyzing gust data")
        # max gust
        try:

            # sample day of
            Sample(HRRRData + "\\2023\\2023gustMaxAggregate.crf", forecastGDB + "\\WindSpeed_DataAll",
                   forecastGDB + "\\GustSample_day0",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f"StdTime {startPoint_HRRR} {endDay0_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\GustSample_day0", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\GustSample_day0", "gust_sfc", "gust_D0", "gust_D0")
            print("day 0 gust sampled")

            # sample day 1
            Sample(HRRRData + "\\2023\\2023gustMaxAggregate.crf", forecastGDB + "\\WindSpeed_DataAll",
                   forecastGDB + "\\GustSample_day1",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay1_HRRR} {startPoint_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\GustSample_day1", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\GustSample_day1", "gust_sfc", "gust_D1", "gust_D1")
            print("day 1 gust sampled")

            # sample day 2 out
            Sample(HRRRData + "\\2023\\2023gustMaxAggregate.crf", forecastGDB + "\\WindSpeed_DataAll",
                   forecastGDB + "\\GustSample_day2",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay2_HRRR} {startDay1_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\GustSample_day2", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\GustSample_day2", "gust_sfc", "gust_D2", "gust_D2")
            print("day 2 gust sampled")

            # sample day 3 out
            Sample(HRRRData + "\\2023\\2023gustMaxAggregate.crf", forecastGDB + "\\WindSpeed_DataAll",
                   forecastGDB + "\\GustSample_day3",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay3_HRRR} {startDay2_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\GustSample_day3", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\GustSample_day3", "gust_sfc", "gust_D3", "gust_D3")
            print("day 3 gust sampled")

            # sample day 4 out
            Sample(HRRRData + "\\2023\\2023gustMaxAggregate.crf", forecastGDB + "\\WindSpeed_DataAll",
                   forecastGDB + "\\GustSample_day4",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay4_HRRR} {startDay3_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\GustSample_day4", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\GustSample_day4", "gust_sfc", "gust_D4", "gust_D4")
            print("day 4 gust sampled")

            # sample day 5 out
            Sample(HRRRData + "\\2023\\2023gustMaxAggregate.crf", forecastGDB + "\\WindSpeed_DataAll",
                   forecastGDB + "\\GustSample_day5",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay5_HRRR} {startDay4_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\GustSample_day5", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\GustSample_day5", "gust_sfc", "gust_D5", "gust_D5")
            print("day 5 gust sampled")

            # sample day 6 out
            Sample(HRRRData + "\\2023\\2023gustMaxAggregate.crf", forecastGDB + "\\WindSpeed_DataAll",
                   forecastGDB + "\\GustSample_day6",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay6_HRRR} {startDay5_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\GustSample_day6", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\GustSample_day6", "gust_sfc", "gust_D6", "gust_D6")
            print("day 6 gust sampled")

            # sample day 7 out
            Sample(HRRRData + "\\2023\\2023gustMaxAggregate.crf", forecastGDB + "\\WindSpeed_DataAll",
                   forecastGDB + "\\GustSample_day7",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay7_HRRR} {startDay6_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\GustSample_day7", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            arcpy.AlterField_management(forecastGDB + "\\GustSample_day7", "gust_sfc", "gust_D7", "gust_D7")
            print("day 7 gust sampled")

            # merge all files and delete intermediaries
            arcpy.CopyFeatures_management(forecastGDB + "\\WindSpeed_DataAll", forecastGDB + "\\WindGustSnow_All")
            print("field copied")

            # add fields
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnow_All", "pathCode", forecastGDB + "\\GustSample_day0",
                                       "pathCode", "gust_D0")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnow_All", "pathCode", forecastGDB + "\\GustSample_day1",
                                       "pathCode", "gust_D1")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnow_All", "pathCode", forecastGDB + "\\GustSample_day2",
                                       "pathCode", "gust_D2")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnow_All", "pathCode", forecastGDB + "\\GustSample_day3",
                                       "pathCode", "gust_D3")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnow_All", "pathCode", forecastGDB + "\\GustSample_day4",
                                       "pathCode", "gust_D4")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnow_All", "pathCode", forecastGDB + "\\GustSample_day5",
                                       "pathCode", "gust_D5")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnow_All", "pathCode", forecastGDB + "\\GustSample_day6",
                                       "pathCode", "gust_D6")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnow_All", "pathCode", forecastGDB + "\\GustSample_day7",
                                       "pathCode", "gust_D7")

            print("files merged")

            arcpy.Delete_management([forecastGDB + "\\GustSample_day0", forecastGDB + "\\GustSample_day1",
                                     forecastGDB + "\\GustSample_day2", forecastGDB + "\\GustSample_day3",
                                     forecastGDB + "\\GustSample_day4", forecastGDB + "\\GustSample_day5",
                                     forecastGDB + "\\GustSample_day6", forecastGDB + "\\GustSample_day7"])
        except Exception as ex:
            print(ex)

        print("analyzing snow cover data")
        # mean snow cover
        try:
            # sample day of
            Sample(HRRRData + "\\2023\\2023snowCoverAggregate.crf", forecastGDB + "\\WindGustSnow_All",
                   forecastGDB + "\\SnowCoverSample_day0",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f"StdTime {startPoint_HRRR} {endDay0_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowCoverSample_day0", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowCoverSample_day0", "snowc_sfc", "snowc_D0", "snowc_D0")
            print("day 0 snowc sampled")

            # sample day 1
            Sample(HRRRData + "\\2023\\2023snowCoverAggregate.crf", forecastGDB + "\\WindGustSnow_All",
                   forecastGDB + "\\SnowCoverSample_day1",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay1_HRRR} {startPoint_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowCoverSample_day1", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowCoverSample_day1", "snowc_sfc", "snowc_D1", "snowc_D1")
            print("day 1 snowc sampled")

            # sample day 2 out
            Sample(HRRRData + "\\2023\\2023snowCoverAggregate.crf", forecastGDB + "\\WindGustSnow_All",
                   forecastGDB + "\\SnowCoverSample_day2",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay2_HRRR} {startDay1_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowCoverSample_day2", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowCoverSample_day2", "snowc_sfc", "snowc_D2", "snowc_D2")
            print("day 2 snowc sampled")

            # sample day 3 out
            Sample(HRRRData + "\\2023\\2023snowCoverAggregate.crf", forecastGDB + "\\WindGustSnow_All",
                   forecastGDB + "\\SnowCoverSample_day3",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay3_HRRR} {startDay2_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowCoverSample_day3", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowCoverSample_day3", "snowc_sfc", "snowc_D3", "snowc_D3")
            print("day 3 snowc sampled")

            # sample day 4 out
            Sample(HRRRData + "\\2023\\2023snowCoverAggregate.crf", forecastGDB + "\\WindGustSnow_All",
                   forecastGDB + "\\SnowCoverSample_day4",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay4_HRRR} {startDay3_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowCoverSample_day4", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowCoverSample_day4", "snowc_sfc", "snowc_D4", "snowc_D4")
            print("day 4 snowc sampled")

            # sample day 5 out
            Sample(HRRRData + "\\2023\\2023snowCoverAggregate.crf", forecastGDB + "\\WindGustSnow_All",
                   forecastGDB + "\\SnowCoverSample_day5",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay5_HRRR} {startDay4_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowCoverSample_day5", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowCoverSample_day5", "snowc_sfc", "snowc_D5", "snowc_D5")
            print("day 5 snowc sampled")

            # sample day 6 out
            Sample(HRRRData + "\\2023\\2023snowCoverAggregate.crf", forecastGDB + "\\WindGustSnow_All",
                   forecastGDB + "\\SnowCoverSample_day6",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay6_HRRR} {startDay5_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowCoverSample_day6", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\SnowCoverSample_day6", "snowc_sfc", "snowc_D6", "snowc_D6")
            print("day 6 snowc sampled")

            # sample day 7 out
            Sample(HRRRData + "\\2023\\2023snowCoverAggregate.crf", forecastGDB + "\\WindGustSnow_All",
                   forecastGDB + "\\SnowCoverSample_day7",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay7_HRRR} {startDay6_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\SnowCoverSample_day7", "OBJECTID", avalanchePolygonPaths, "OBJECTID",
                                       "pathCode")
            arcpy.AlterField_management(forecastGDB + "\\SnowCoverSample_day7", "snowc_sfc", "snowc_D7", "snowc_D7")
            print("day 7 gust sampled")

            # merge all files and delete intermediaries
            arcpy.CopyFeatures_management(forecastGDB + "\\WindGustSnow_All", forecastGDB + "\\WindGustSnowCover_All")
            print("field copied")

            # add fields
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCover_All", "pathCode", forecastGDB + "\\SnowCoverSample_day0",
                                       "pathCode", "snowc_D0")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCover_All", "pathCode", forecastGDB + "\\SnowCoverSample_day1",
                                       "pathCode", "snowc_D1")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCover_All", "pathCode", forecastGDB + "\\SnowCoverSample_day2",
                                       "pathCode", "snowc_D2")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCover_All", "pathCode", forecastGDB + "\\SnowCoverSample_day3",
                                       "pathCode", "snowc_D3")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCover_All", "pathCode", forecastGDB + "\\SnowCoverSample_day4",
                                       "pathCode", "snowc_D4")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCover_All", "pathCode", forecastGDB + "\\SnowCoverSample_day5",
                                       "pathCode", "snowc_D5")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCover_All", "pathCode", forecastGDB + "\\SnowCoverSample_day6",
                                       "pathCode", "snowc_D6")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCover_All", "pathCode", forecastGDB + "\\SnowCoverSample_day7",
                                       "pathCode", "snowc_D7")

            print("files merged")

            arcpy.Delete_management([forecastGDB + "\\SnowCoverSample_day0", forecastGDB + "\\SnowCoverSample_day1",
                                     forecastGDB + "\\SnowCoverSample_day2", forecastGDB + "\\SnowCoverSample_day3",
                                     forecastGDB + "\\SnowCoverSample_day4", forecastGDB + "\\SnowCoverSample_day5",
                                     forecastGDB + "\\SnowCoverSample_day6", forecastGDB + "\\SnowCoverSample_day7"])
        except Exception as ex:
            print(ex)

        print("analyzing tmp H data")
        # tmp h data
        try:

            # sample day of
            Sample(HRRRData + "\\2023\\2023TmpHTGLAggregate.crf", forecastGDB + "\\WindGustSnowCover_All",
                   forecastGDB + "\\TmpHtglSample_day0",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f"StdTime {startPoint_HRRR} {endDay0_HRRR}", "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\TmpHtglSample_day0", "OBJECTID", avalanchePolygonPaths,
                                       "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\TmpHtglSample_day0", "tmp_htgl", "tmp_h_D0", "tmp_h_D0")
            print("day 0 tmph sampled")

            # sample day 1
            Sample(HRRRData + "\\2023\\2023TmpHTGLAggregate.crf", forecastGDB + "\\WindGustSnowCover_All",
                   forecastGDB + "\\TmpHtglSample_day1",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay1_HRRR} {startPoint_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\TmpHtglSample_day1", "OBJECTID", avalanchePolygonPaths,
                                       "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\TmpHtglSample_day1", "tmp_htgl", "tmp_h_D1", "tmp_h_D1")
            print("day 1 tmph sampled")

            # sample day 2 out
            Sample(HRRRData + "\\2023\\2023TmpHTGLAggregate.crf", forecastGDB + "\\WindGustSnowCover_All",
                   forecastGDB + "\\TmpHtglSample_day2",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay2_HRRR} {startDay1_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\TmpHtglSample_day2", "OBJECTID", avalanchePolygonPaths,
                                       "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\TmpHtglSample_day2", "tmp_htgl", "tmp_h_D2", "tmp_h_D2")
            print("day 2 tmph sampled")

            # sample day 3 out
            Sample(HRRRData + "\\2023\\2023TmpHTGLAggregate.crf", forecastGDB + "\\WindGustSnowCover_All",
                   forecastGDB + "\\TmpHtglSample_day3",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay3_HRRR} {startDay2_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\TmpHtglSample_day3", "OBJECTID", avalanchePolygonPaths,
                                       "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\TmpHtglSample_day3", "tmp_htgl", "tmp_h_D3", "tmp_h_D3")
            print("day 3 tmph sampled")

            # sample day 4 out
            Sample(HRRRData + "\\2023\\2023TmpHTGLAggregate.crf", forecastGDB + "\\WindGustSnowCover_All",
                   forecastGDB + "\\TmpHtglSample_day4",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay4_HRRR} {startDay3_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\TmpHtglSample_day4", "OBJECTID", avalanchePolygonPaths,
                                       "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\TmpHtglSample_day4", "tmp_htgl", "tmp_h_D4", "tmp_h_D4")
            print("day 4 tmp sampled")

            # sample day 5 out
            Sample(HRRRData + "\\2023\\2023TmpHTGLAggregate.crf", forecastGDB + "\\WindGustSnowCover_All",
                   forecastGDB + "\\TmpHtglSample_day5",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay5_HRRR} {startDay4_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\TmpHtglSample_day5", "OBJECTID", avalanchePolygonPaths,
                                       "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\TmpHtglSample_day5", "tmp_htgl", "tmp_h_D5", "tmp_h_D5")
            print("day 5 tmph sampled")

            # sample day 6 out
            Sample(HRRRData + "\\2023\\2023TmpHTGLAggregate.crf", forecastGDB + "\\WindGustSnowCover_All",
                   forecastGDB + "\\TmpHtglSample_day6",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay6_HRRR} {startDay5_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\TmpHtglSample_day6", "OBJECTID", avalanchePolygonPaths,
                                       "OBJECTID",
                                       "pathCode")
            # change field
            arcpy.AlterField_management(forecastGDB + "\\TmpHtglSample_day6", "tmp_htgl", "tmp_h_D6", "tmp_h_D6")
            print("day 6 tmph sampled")

            # sample day 7 out
            Sample(HRRRData + "\\2023\\2023TmpHTGLAggregate.crf", forecastGDB + "\\WindGustSnowCover_All",
                   forecastGDB + "\\TmpHtglSample_day7",
                   "NEAREST", "OBJECTID", "ALL_SLICES",
                   f'StdTime {startDay7_HRRR} {startDay6_HRRR}', "MEAN", "", "",
                   "ROW_WISE", "FEATURE_CLASS")
            # join path code and name
            arcpy.JoinField_management(forecastGDB + "\\TmpHtglSample_day7", "OBJECTID", avalanchePolygonPaths,
                                       "OBJECTID",
                                       "pathCode")
            arcpy.AlterField_management(forecastGDB + "\\TmpHtglSample_day7", "tmp_htgl", "tmp_h_D7", "tmp_h_D7")
            print("day 7 tmp sampled")

            # merge all files and delete intermediaries
            arcpy.CopyFeatures_management(forecastGDB + "\\WindGustSnowCover_All", forecastGDB + "\\WindGustSnowCoverTmp_All")
            print("field copied")

            # add fields
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCoverTmp_All", "pathCode",
                                       forecastGDB + "\\TmpHtglSample_day0",
                                       "pathCode", "tmp_h_D0")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCoverTmp_All", "pathCode",
                                       forecastGDB + "\\TmpHtglSample_day1",
                                       "pathCode", "tmp_h_D1")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCoverTmp_All", "pathCode",
                                       forecastGDB + "\\TmpHtglSample_day2",
                                       "pathCode", "tmp_h_D2")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCoverTmp_All", "pathCode",
                                       forecastGDB + "\\TmpHtglSample_day3",
                                       "pathCode", "tmp_h_D3")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCoverTmp_All", "pathCode",
                                       forecastGDB + "\\TmpHtglSample_day4",
                                       "pathCode", "tmp_h_D4")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCoverTmp_All", "pathCode",
                                       forecastGDB + "\\TmpHtglSample_day5",
                                       "pathCode", "tmp_h_D5")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCoverTmp_All", "pathCode",
                                       forecastGDB + "\\TmpHtglSample_day6",
                                       "pathCode", "tmp_h_D6")
            arcpy.JoinField_management(forecastGDB + "\\WindGustSnowCoverTmp_All", "pathCode",
                                       forecastGDB + "\\TmpHtglSample_day7",
                                       "pathCode", "tmp_h_D7")

            print("files merged")

            arcpy.Delete_management([forecastGDB + "\\TmpHtglSample_day0", forecastGDB + "\\TmpHtglSample_day1",
                                     forecastGDB + "\\TmpHtglSample_day2", forecastGDB + "\\TmpHtglSample_day3",
                                     forecastGDB + "\\TmpHtglSample_day4", forecastGDB + "\\TmpHtglSample_day5",
                                     forecastGDB + "\\TmpHtglSample_day6", forecastGDB + "\\TmpHtglSample_day7"])
        except Exception as ex:
            print(ex)
    except Exception as ex:
        print(ex)

    print("Day 0 at-risk aspects")
    try:
        print("process to create coefficient for day0")
        try:
            # copy field to variable coefficient field
            totalVariables = forecastGDB + "\\WindGustSnowCoverTmp_All"
            arcpy.CopyFeatures_management(totalVariables, forecastGDB + "\\CoefficientFile")
            # add day0 coEx field
            arcpy.AddField_management(forecastGDB + "\\CoefficientFile", "CoEf_D0", "DOUBLE", "", "", "", "CoEf_D0")
            print("field added")
            arcpy.AddField_management(forecastGDB + "\\CoefficientFile", "CE_IndexD0", "DOUBLE", "", "", "", "CE_IndexD0")
            print("field added")
            # run update cursor to establish values:
            with arcpy.da.UpdateCursor(forecastGDB + "\\CoefficientFile", ["asnow_D0", "wind_D0", "gust_D0", "snowc_D0", "tmp_h_D0", "CoEf_D0", "CE_IndexD0"]) as cursor:
                for row in cursor:
                    if row[0] > 0 and row[1] >= 4:
                        row[5] = (31.21618 * ((float(row[0])) / 3.20527)) + (11.44559 * ((float(row[1])) / 13.618928)) + (
                                    13.52491 * ((float(row[2])) / 28.581961))
                        cursor.updateRow(row)
                        row[6] = float(row[5]) / 53.790658

                        cursor.updateRow(row)
                    else:
                        row[5] = 5
                        row[6] = 5
                    cursor.updateRow(row)
        except Exception as ex:
            print(ex)

        print('starting on wind direction and aspect analysis')
        # sample the paths on wind direction
        try:
            aspect = avyGDB + "\\Aspect_Clipped"
            aspect_clipped = forecastGDB + "\\aspect_paths"
            arcpy.Clip_management(aspect, AvyPaths, aspect_clipped)
            # make wind dir file
            print("Day 0 at-risk aspects")
            try:
                featureClass = forecastGDB + "\\WindGustSnow_All"
                try:
                    dir0_15 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 0')
                    arcpy.SelectLayerByAttribute_management(dir0_15, "SUBSET_SELECTION", '"windDir_D0" <= 15')
                    arcpy.CopyFeatures_management(dir0_15, forecastGDB + "\\DirectGroup0_15")

                    dir15_30 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 15')
                    arcpy.SelectLayerByAttribute_management(dir15_30, "SUBSET_SELECTION", '"windDir_D0" <= 30')
                    arcpy.CopyFeatures_management(dir15_30, forecastGDB + "\\DirectGroup15_30")

                    dir30_45 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 30')
                    arcpy.SelectLayerByAttribute_management(dir30_45, "SUBSET_SELECTION", '"windDir_D0" <= 45')
                    arcpy.CopyFeatures_management(dir30_45, forecastGDB + "\\DirectGroup30_45")

                    dir45_60 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 45')
                    arcpy.SelectLayerByAttribute_management(dir45_60, "SUBSET_SELECTION", '"windDir_D0" <= 60')
                    arcpy.CopyFeatures_management(dir45_60, forecastGDB + "\\DirectGroup45_60")

                    dir60_75 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 60')
                    arcpy.SelectLayerByAttribute_management(dir60_75, "SUBSET_SELECTION", '"windDir_D0" <= 75')
                    arcpy.CopyFeatures_management(dir60_75, forecastGDB + "\\DirectGroup60_75")

                    dir75_90 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 75')
                    arcpy.SelectLayerByAttribute_management(dir75_90, "SUBSET_SELECTION", '"windDir_D0" <= 90')
                    arcpy.CopyFeatures_management(dir75_90, forecastGDB + "\\DirectGroup75_90")

                    dir90_105 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 90')
                    arcpy.SelectLayerByAttribute_management(dir90_105, "SUBSET_SELECTION", '"windDir_D0" <= 105')
                    arcpy.CopyFeatures_management(dir90_105, forecastGDB + "\\DirectGroup90_105")

                    dir105_120 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 105')
                    arcpy.SelectLayerByAttribute_management(dir105_120, "SUBSET_SELECTION", '"windDir_D0" <= 120')
                    arcpy.CopyFeatures_management(dir105_120, forecastGDB + "\\DirectGroup105_120")

                    dir120_135 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 120')
                    arcpy.SelectLayerByAttribute_management(dir120_135, "SUBSET_SELECTION", '"windDir_D0" <= 135')
                    arcpy.CopyFeatures_management(dir120_135, forecastGDB + "\\DirectGroup120_135")

                    dir135_150 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 135')
                    arcpy.SelectLayerByAttribute_management(dir135_150, "SUBSET_SELECTION", '"windDir_D0" <= 150')
                    arcpy.CopyFeatures_management(dir135_150, forecastGDB + "\\DirectGroup135_150")

                    dir150_165 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 150')
                    arcpy.SelectLayerByAttribute_management(dir150_165, "SUBSET_SELECTION", '"windDir_D0" <= 165')
                    arcpy.CopyFeatures_management(dir150_165, forecastGDB + "\\DirectGroup150_165")

                    dir165_180 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 165')
                    arcpy.SelectLayerByAttribute_management(dir165_180, "SUBSET_SELECTION", '"windDir_D0" <= 180')
                    arcpy.CopyFeatures_management(dir165_180, forecastGDB + "\\DirectGroup165_180")

                    dir180_195 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 180')
                    arcpy.SelectLayerByAttribute_management(dir180_195, "SUBSET_SELECTION", '"windDir_D0" <= 195')
                    arcpy.CopyFeatures_management(dir180_195, forecastGDB + "\\DirectGroup180_195")

                    dir195_210 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 195')
                    arcpy.SelectLayerByAttribute_management(dir195_210, "SUBSET_SELECTION", '"windDir_D0" <= 210')
                    arcpy.CopyFeatures_management(dir195_210, forecastGDB + "\\DirectGroup195_210")

                    dir210_225 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 210')
                    arcpy.SelectLayerByAttribute_management(dir210_225, "SUBSET_SELECTION", '"windDir_D0" <= 225')
                    arcpy.CopyFeatures_management(dir210_225, forecastGDB + "\\DirectGroup210_225")

                    dir225_240 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 225')
                    arcpy.SelectLayerByAttribute_management(dir225_240, "SUBSET_SELECTION", '"windDir_D0" <= 240')
                    arcpy.CopyFeatures_management(dir225_240, forecastGDB + "\\DirectGroup225_240")

                    dir240_255 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 240')
                    arcpy.SelectLayerByAttribute_management(dir240_255, "SUBSET_SELECTION", '"windDir_D0" <= 255')
                    arcpy.CopyFeatures_management(dir240_255, forecastGDB + "\\DirectGroup240_255")

                    dir255_270 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 255')
                    arcpy.SelectLayerByAttribute_management(dir255_270, "SUBSET_SELECTION", '"windDir_D0" <= 270')
                    arcpy.CopyFeatures_management(dir255_270, forecastGDB + "\\DirectGroup255_270")

                    dir270_285 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 270')
                    arcpy.SelectLayerByAttribute_management(dir270_285, "SUBSET_SELECTION", '"windDir_D0" <= 285')
                    arcpy.CopyFeatures_management(dir270_285, forecastGDB + "\\DirectGroup270_285")

                    dir285_300 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 285')
                    arcpy.SelectLayerByAttribute_management(dir285_300, "SUBSET_SELECTION", '"windDir_D0" <= 300')
                    arcpy.CopyFeatures_management(dir285_300, forecastGDB + "\\DirectGroup285_300")

                    dir300_315 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 300')
                    arcpy.SelectLayerByAttribute_management(dir300_315, "SUBSET_SELECTION", '"windDir_D0" <= 315')
                    arcpy.CopyFeatures_management(dir300_315, forecastGDB + "\\DirectGroup300_315")

                    dir315_330 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 315')
                    arcpy.SelectLayerByAttribute_management(dir315_330, "SUBSET_SELECTION", '"windDir_D0" <= 330')
                    arcpy.CopyFeatures_management(dir315_330, forecastGDB + "\\DirectGroup315_330")

                    dir330_345 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 330')
                    arcpy.SelectLayerByAttribute_management(dir330_345, "SUBSET_SELECTION", '"windDir_D0" <= 345')
                    arcpy.CopyFeatures_management(dir330_345, forecastGDB + "\\DirectGroup330_345")

                    dir345_360 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D0" > 345')
                    arcpy.SelectLayerByAttribute_management(dir345_360, "SUBSET_SELECTION", '"windDir_D0" <= 360')
                    arcpy.CopyFeatures_management(dir345_360, forecastGDB + "\\DirectGroup345_360")
                    print("direction group shapefiles made")
                except Exception as ex:
                    print(ex)

                arcpy.env.workspace = forecastGDB
                files = arcpy.ListFeatureClasses()
                for file in files:
                    if file.startswith("DirectGroup"):
                        if int(arcpy.GetCount_management(file).getOutput(0)) <= 0:
                            arcpy.Delete_management(file)
                print("deleted Day 0 empty aspect files")

                arcpy.env.workspace = forecastGDB
                files = arcpy.ListFeatureClasses()
                for file in files:
                    if file.startswith("DirectGroup"):
                        if file.endswith("0_15"):
                            Reclassify0_15 = Reclassify(aspect_clipped, "Value", RemapRange([[330, 360, 1], [0, 15, 1], [15, 45, 1], [45, 330, "NODATA"]]))
                            Reclassify0_15.save(forecastGDB + "\\AspectReclass_0_15")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass_0_15", forecastGDB + "\\AspectWindDir0_15")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir0_15", AvyPaths, forecastGDB + "\\AspectWindDir0_15_Clip")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "", "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir0_15_Clip", "WITHIN", forecastGDB + "\\TempPaths", "", "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_0_15")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir0_15")

                        if file.endswith("15_30"):
                            Reclassify15_30 = Reclassify(aspect_clipped, "Value", RemapRange([[345, 360, 1], [0, 15, 1], [15, 60, 1], [60, 345, "NODATA"]]))
                            Reclassify15_30.save(forecastGDB + "\\AspectReclass_15_30")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass_15_30", forecastGDB + "\\AspectWindDir15_30")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir15_30", AvyPaths,
                                                forecastGDB + "\\AspectWindDir0_15_30_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir15_30")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir0_15_30_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_15_30")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")

                        if file.endswith("30_45"):
                            Reclassify30_45 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 30, 1], [30, 45, 1], [45, 75, 1], [75, 360, "NODATA"]]))
                            Reclassify30_45.save(forecastGDB + "\\AspectReclass_30_45")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass_30_45", forecastGDB + "\\AspectWindDir30_45")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir30_45", AvyPaths,
                                                forecastGDB + "\\AspectWindDir30_45_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir30_45")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir30_45_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_30_45")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("45_60"):
                            Reclassify45_60 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 15, "NODATA"], [15, 45, 1], [45, 60, 1], [60, 90, 1], [90, 360, "NODATA"]]))
                            Reclassify45_60.save(forecastGDB + "\\AspectReclass_45_60")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass_45_60", forecastGDB + "\\AspectWindDir45_60")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir45_60", AvyPaths,
                                                forecastGDB + "\\AspectWindDir45_60_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir45_60")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir45_60_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_45_60")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("60_75"):
                            Reclassify60_75 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 30, "NODATA"], [30, 60, 1], [60, 75, 1], [75, 105, 1], [105, 360, "NODATA"]]))
                            Reclassify60_75.save(forecastGDB + "\\AspectReclass60_75")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass60_75", forecastGDB + "\\AspectWindDir60_75")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir60_75", AvyPaths,
                                                forecastGDB + "\\AspectWindDir60_75_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir60_75")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir60_75_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_60_75")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("75_90"):
                            Reclassify75_90 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 45, "NODATA"], [45, 75, 1], [75, 90, 1], [90, 120, 1], [120, 360, "NODATA"]]))
                            Reclassify75_90.save(forecastGDB + "\\AspectReclass75_90")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass75_90", forecastGDB + "\\AspectWindDir75_90")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir75_90", AvyPaths,
                                                forecastGDB + "\\AspectWindDir75_90_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir75_90")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir75_90_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_75_90")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("90_105"):
                            Reclassify90_105 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 60, "NODATA"], [60, 90, 1], [90, 105, 1], [105, 135, 1], [135, 360, "NODATA"]]))
                            Reclassify90_105.save(forecastGDB + "\\AspectReclass90_105")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass90_105", forecastGDB + "\\AspectWindDir90_105")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir90_105", AvyPaths,
                                                forecastGDB + "\\AspectWindDir90_105_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir90_105")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir90_105_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_90_105")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("105_120"):
                            Reclassify105_120 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 75, "NODATA"], [75, 105, 1], [105, 120, 1], [120, 150, 1], [150, 360, "NODATA"]]))
                            Reclassify105_120.save(forecastGDB + "\\AspectReclass105_120")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass105_120", forecastGDB + "\\AspectWindDir105_120")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir105_120", AvyPaths,
                                                forecastGDB + "\\AspectWindDir105_120_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir105_120")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir105_120_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_105_120")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("120_135"):
                            Reclassify120_135 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 90, "NODATA"], [90, 120, 1], [120, 135, 1], [135, 165, 1], [165, 360, "NODATA"]]))
                            Reclassify120_135.save(forecastGDB + "\\AspectReclass120_135")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass120_135", forecastGDB + "\\AspectWindDir120_135")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir120_135", AvyPaths,
                                                forecastGDB + "\\AspectWindDir120_135_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir120_135")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir120_135_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_120_135")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("135_150"):
                            Reclassify135_150 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 105, "NODATA"], [105, 135, 1], [135, 150, 1], [150, 180, 1], [180, 360, "NODATA"]]))
                            Reclassify135_150.save(forecastGDB + "\\AspectReclass135_150")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass135_150", forecastGDB + "\\AspectWindDir135_150")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir135_150", AvyPaths,
                                                forecastGDB + "\\AspectWindDir135_150_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir135_150")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir135_150_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_135_150")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("150_165"):
                            Reclassify150_165 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 120, "NODATA"], [120, 150, 1], [150, 165, 1], [165, 195, 1], [195, 360, "NODATA"]]))
                            Reclassify150_165.save(forecastGDB + "\\AspectReclass150_165")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass150_165", forecastGDB + "\\AspectWindDir150_165")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir150_165", AvyPaths,
                                                forecastGDB + "\\AspectWindDir150_165_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir150_165")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir150_165_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_150_165")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("165_180"):
                            Reclassify165_180 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 135, "NODATA"], [135, 165, 1], [165, 180, 1], [180, 210, 1], [210, 360, "NODATA"]]))
                            Reclassify165_180.save(forecastGDB + "\\AspectReclass165_180")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass165_180", forecastGDB + "\\AspectWindDir165_180")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir165_180", AvyPaths,
                                                forecastGDB + "\\AspectWindDir165_180_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir165_180")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir165_180_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_165_180")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("180_195"):
                            Reclassify180_195 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 150, "NODATA"], [150, 180, 1], [180, 195, 1], [195, 225, 1], [225, 360, "NODATA"]]))
                            Reclassify180_195.save(forecastGDB + "\\AspectReclass180_195")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass180_195", forecastGDB + "\\AspectWindDir180_195")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir180_195", AvyPaths,
                                                forecastGDB + "\\AspectWindDir180_195_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir180_195")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir180_195_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_180_195")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("195_210"):
                            Reclassify195_210 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 165, "NODATA"], [165, 195, 1], [195, 210, 1], [210, 240, 1], [240, 360, "NODATA"]]))
                            Reclassify195_210.save(forecastGDB + "\\AspectReclass195_210")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass195_210", forecastGDB + "\\AspectWindDir195_210")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir195_210", AvyPaths,
                                                forecastGDB + "\\AspectWindDir195_210_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir195_210")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir195_210_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_195_210")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("210_225"):
                            Reclassify210_225 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 180, "NODATA"], [180, 210, 1], [210, 225, 1], [225, 255, 1], [255, 360, "NODATA"]]))
                            Reclassify210_225.save(forecastGDB + "\\AspectReclass210_225")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass210_225", forecastGDB + "\\AspectWindDir210_225")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir210_225", AvyPaths,
                                                forecastGDB + "\\AspectWindDir210_225_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir210_225")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir210_225_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_210_225")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("225_240"):
                            Reclassify225_240 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 195, "NODATA"], [195, 225, 1], [225, 240, 1], [240, 270, 1], [270, 360, "NODATA"]]))
                            Reclassify225_240.save(forecastGDB + "\\AspectReclass225_240")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass225_240", forecastGDB + "\\AspectWindDir225_240")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir225_240", AvyPaths,
                                                forecastGDB + "\\AspectWindDir225_240_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir225_240")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir225_240_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_225_240")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("240_255"):
                            Reclassify240_255 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 210, "NODATA"], [210, 240, 1], [240, 255, 1], [255, 285, 1], [285, 360, "NODATA"]]))
                            Reclassify240_255.save(forecastGDB + "\\AspectReclass240_255")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass240_255", forecastGDB + "\\AspectWindDir240_255")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir240_255", AvyPaths,
                                                forecastGDB + "\\AspectWindDir240_255_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir240_255")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir240_255_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_240_255")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("255_270"):
                            Reclassify255_270 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 225, "NODATA"], [225, 255, 1], [255, 270, 1], [270, 300, 1], [300, 360, "NODATA"]]))
                            Reclassify255_270.save(forecastGDB + "\\AspectReclass255_270")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass255_270", forecastGDB + "\\AspectWindDir255_270")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir255_270", AvyPaths,
                                                forecastGDB + "\\AspectWindDir255_270_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir255_270")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir255_270_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_255_270")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("270_285"):
                            Reclassify270_285 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 240, "NODATA"], [240, 270, 1], [270, 285, 1], [285, 315, 1], [315, 360, "NODATA"]]))
                            Reclassify270_285.save(forecastGDB + "\\AspectReclass270_285")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass270_285", forecastGDB + "\\AspectWindDir270_285")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir270_285", AvyPaths,
                                                forecastGDB + "\\AspectWindDir270_285_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir270_285")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir270_285_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_270_285")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("285_300"):
                            Reclassify285_300 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 255, "NODATA"], [255, 285, 1], [285, 300, 1], [300, 330, 1], [330, 360, "NODATA"]]))
                            Reclassify285_300.save(forecastGDB + "\\AspectReclass285_300")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass285_300", forecastGDB + "\\AspectWindDir285_300")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir285_300", AvyPaths,
                                                forecastGDB + "\\AspectWindDir285_300_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir285_300")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir285_300_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_285_300")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("300_315"):
                            Reclassify300_315 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 270, "NODATA"], [270, 300, 1], [300, 315, 1], [315, 345, 1], [345, 360, "NODATA"]]))
                            Reclassify300_315.save(forecastGDB + "\\AspectReclass300_315")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass300_315", forecastGDB + "\\AspectWindDir300_315")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir300_315", AvyPaths,
                                                forecastGDB + "\\AspectWindDir300_315_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir300_315")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir300_315_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_300_315")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        if file.endswith("315_330"):
                            Reclassify315_330 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 285, "NODATA"], [285, 315, 1], [315, 330, 1], [330, 360, 1]]))
                            Reclassify315_330.save(forecastGDB + "\\AspectReclass315_330")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass315_330", forecastGDB + "\\AspectWindDir315_330")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir315_330", AvyPaths,
                                                forecastGDB + "\\AspectWindDir315_330_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir315_330")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir315_330_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_315_330")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")

                        if file.endswith("330_345"):
                            Reclassify330_345 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 15, 1], [15, 300, "NODATA"], [300, 330, 1], [330, 345, 1], [345, 360, 1]]))
                            Reclassify330_345.save(forecastGDB + "\\AspectReclass330_345")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass330_345", forecastGDB + "\\AspectWindDir330_345")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir330_345", AvyPaths,
                                                forecastGDB + "\\AspectWindDir330_345_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir330_345")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir330_345_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_330_345")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")

                        if file.endswith("345_360"):
                            Reclassify345_360 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 30, 1], [30, 315, "NODATA"], [315, 345, 1], [345, 360, 1]]))
                            Reclassify345_360.save(forecastGDB + "\\AspectReclass345_360")
                            arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass345_360", forecastGDB + "\\AspectWindDir345_360")
                            arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir345_360", AvyPaths,
                                                forecastGDB + "\\AspectWindDir345_360_Clip")
                            arcpy.Delete_management(forecastGDB + "\\AspectWindDir345_360")
                            pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                                "NEW_SELECTION")
                            arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                            AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir345_360_Clip",
                                                                                  "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                                  "NEW_SELECTION")
                            arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day0_345_360")
                            arcpy.Delete_management(forecastGDB + "\\TempPaths")

                arcpy.env.workspace = forecastGDB
                files = arcpy.ListRasters()
                shapefiles = arcpy.ListFeatureClasses()
                lists = arcpy.ListFeatureClasses("AtRiskAspect_Day0*")
                for file in files:
                    if file.startswith("AspectReclass"):
                        arcpy.Delete_management(file)
                print("empty files deleted")

                for shape in shapefiles:
                    if shape.endswith("Clip"):
                        arcpy.Delete_management(shape)
                arcpy.Merge_management(lists, os.path.join(forecastGDB, "Merged_Day0AtRiskAspects"))
                for shape in shapefiles:
                    if shape.startswith("AtRiskAspect_Day0"):
                        arcpy.Delete_management(shape)
                    if shape.startswith("DirectGroup"):
                        arcpy.Delete_management(shape)
            except Exception as ex:
                print(ex)
        except Exception as ex:
            print(ex)

        try:
            VarPaths = arcpy.SelectLayerByAttribute_management(forecastGDB + "\\CoefficientFile", "NEW_SELECTION",
                                                               '"CoEF_D0" > 0')
            arcpy.CopyFeatures_management(VarPaths, forecastGDB + "\\HighVariablePaths")
            print("path selection created for variable")

            leewardPathsD0 = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS",
                                                                    forecastGDB + "\\Merged_Day0AtRiskAspects", "",
                                                                    "NEW_SELECTION")
            arcpy.CopyFeatures_management(leewardPathsD0, forecastGDB + "\\LeewardDay0Paths")
            print("leeward paths selected")

            atRiskPaths = arcpy.SelectLayerByLocation_management(forecastGDB + "\\LeewardDay0Paths", "CONTAINS",
                                                                 forecastGDB + "\\HighVariablePaths", "", "NEW_SELECTION")
            arcpy.CopyFeatures_management(atRiskPaths, forecastGDB + "\\Day0_AtRiskPaths")

            arcpy.JoinField_management(forecastGDB + "\\Day0_AtRiskPaths", "pathCode", forecastGDB + "\\HighVariablePaths", "pathCode", ["CoEF_D0", "CE_IndexD0"])
        except Exception as ex:
            print(ex)
    except Exception as ex:
        print(ex)

    print("Day 1 at-risk aspects")
    # create feature classes and groups of average values
    try:
        try:
            # copy field to variable coefficient field
            arcpy.AddField_management(forecastGDB + "\\CoefficientFile", "CoEf_D1", "DOUBLE", "", "", "", "CoEf_D1")
            print("field added")
            arcpy.AddField_management(forecastGDB + "\\CoefficientFile", "CE_IndexD1", "DOUBLE", "", "", "", "CE_IndexD1")
            print("field added")
            # run update cursor to establish values:
            with arcpy.da.UpdateCursor(forecastGDB + "\\CoefficientFile",
                                       ["asnow_D1", "wind_D1", "gust_D1", "snowc_D1", "CoEf_D1", "CE_IndexD1"]) as cursor:
                for row in cursor:
                    if row[0] > 0 and row[1] >= 4:
                        row[4] = (32.94445 * ((float(row[0])) / 3.19957)) + (15.58937 * ((float(row[1])) / 11.193928)) + (
                                    17.16771 * ((float(row[2])) / 22.08099))
                        cursor.updateRow(row)
                        row[5] = float(row[4]) / 64.811024

                        cursor.updateRow(row)
                    else:
                        row[4] = 5
                        row[5] = 5
                    cursor.updateRow(row)
        except Exception as ex:
            print(ex)

        try:
            aspect = avyGDB + "\\Aspect_Clipped"
            aspect_clipped = forecastGDB + "\\aspect_paths"
            arcpy.Clip_management(aspect, AvyPaths, aspect_clipped)
            # make wind dir file
            featureClass = forecastGDB + "\\WindGustSnow_All"
            try:
                dir0_15 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 0')
                arcpy.SelectLayerByAttribute_management(dir0_15, "SUBSET_SELECTION", '"windDir_D1" <= 15')
                arcpy.CopyFeatures_management(dir0_15, forecastGDB + "\\DirectGroup0_15")

                dir15_30 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 15')
                arcpy.SelectLayerByAttribute_management(dir15_30, "SUBSET_SELECTION", '"windDir_D1" <= 30')
                arcpy.CopyFeatures_management(dir15_30, forecastGDB + "\\DirectGroup15_30")

                dir30_45 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 30')
                arcpy.SelectLayerByAttribute_management(dir30_45, "SUBSET_SELECTION", '"windDir_D1" <= 45')
                arcpy.CopyFeatures_management(dir30_45, forecastGDB + "\\DirectGroup30_45")

                dir45_60 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 45')
                arcpy.SelectLayerByAttribute_management(dir45_60, "SUBSET_SELECTION", '"windDir_D1" <= 60')
                arcpy.CopyFeatures_management(dir45_60, forecastGDB + "\\DirectGroup45_60")

                dir60_75 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 60')
                arcpy.SelectLayerByAttribute_management(dir60_75, "SUBSET_SELECTION", '"windDir_D1" <= 75')
                arcpy.CopyFeatures_management(dir60_75, forecastGDB + "\\DirectGroup60_75")

                dir75_90 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 75')
                arcpy.SelectLayerByAttribute_management(dir75_90, "SUBSET_SELECTION", '"windDir_D1" <= 90')
                arcpy.CopyFeatures_management(dir75_90, forecastGDB + "\\DirectGroup75_90")

                dir90_105 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 90')
                arcpy.SelectLayerByAttribute_management(dir90_105, "SUBSET_SELECTION", '"windDir_D1" <= 105')
                arcpy.CopyFeatures_management(dir90_105, forecastGDB + "\\DirectGroup90_105")

                dir105_120 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 105')
                arcpy.SelectLayerByAttribute_management(dir105_120, "SUBSET_SELECTION", '"windDir_D1" <= 120')
                arcpy.CopyFeatures_management(dir105_120, forecastGDB + "\\DirectGroup105_120")

                dir120_135 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 120')
                arcpy.SelectLayerByAttribute_management(dir120_135, "SUBSET_SELECTION", '"windDir_D1" <= 135')
                arcpy.CopyFeatures_management(dir120_135, forecastGDB + "\\DirectGroup120_135")

                dir135_150 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 135')
                arcpy.SelectLayerByAttribute_management(dir135_150, "SUBSET_SELECTION", '"windDir_D1" <= 150')
                arcpy.CopyFeatures_management(dir135_150, forecastGDB + "\\DirectGroup135_150")

                dir150_165 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 150')
                arcpy.SelectLayerByAttribute_management(dir150_165, "SUBSET_SELECTION", '"windDir_D1" <= 165')
                arcpy.CopyFeatures_management(dir150_165, forecastGDB + "\\DirectGroup150_165")

                dir165_180 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 165')
                arcpy.SelectLayerByAttribute_management(dir165_180, "SUBSET_SELECTION", '"windDir_D1" <= 180')
                arcpy.CopyFeatures_management(dir165_180, forecastGDB + "\\DirectGroup165_180")

                dir180_195 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 180')
                arcpy.SelectLayerByAttribute_management(dir180_195, "SUBSET_SELECTION", '"windDir_D1" <= 195')
                arcpy.CopyFeatures_management(dir180_195, forecastGDB + "\\DirectGroup180_195")

                dir195_210 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 195')
                arcpy.SelectLayerByAttribute_management(dir195_210, "SUBSET_SELECTION", '"windDir_D1" <= 210')
                arcpy.CopyFeatures_management(dir195_210, forecastGDB + "\\DirectGroup195_210")

                dir210_225 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 210')
                arcpy.SelectLayerByAttribute_management(dir210_225, "SUBSET_SELECTION", '"windDir_D1" <= 225')
                arcpy.CopyFeatures_management(dir210_225, forecastGDB + "\\DirectGroup210_225")

                dir225_240 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 225')
                arcpy.SelectLayerByAttribute_management(dir225_240, "SUBSET_SELECTION", '"windDir_D1" <= 240')
                arcpy.CopyFeatures_management(dir225_240, forecastGDB + "\\DirectGroup225_240")

                dir240_255 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 240')
                arcpy.SelectLayerByAttribute_management(dir240_255, "SUBSET_SELECTION", '"windDir_D1" <= 255')
                arcpy.CopyFeatures_management(dir240_255, forecastGDB + "\\DirectGroup240_255")

                dir255_270 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 255')
                arcpy.SelectLayerByAttribute_management(dir255_270, "SUBSET_SELECTION", '"windDir_D1" <= 270')
                arcpy.CopyFeatures_management(dir255_270, forecastGDB + "\\DirectGroup255_270")

                dir270_285 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 270')
                arcpy.SelectLayerByAttribute_management(dir270_285, "SUBSET_SELECTION", '"windDir_D1" <= 285')
                arcpy.CopyFeatures_management(dir270_285, forecastGDB + "\\DirectGroup270_285")

                dir285_300 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 285')
                arcpy.SelectLayerByAttribute_management(dir285_300, "SUBSET_SELECTION", '"windDir_D1" <= 300')
                arcpy.CopyFeatures_management(dir285_300, forecastGDB + "\\DirectGroup285_300")

                dir300_315 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 300')
                arcpy.SelectLayerByAttribute_management(dir300_315, "SUBSET_SELECTION", '"windDir_D1" <= 315')
                arcpy.CopyFeatures_management(dir300_315, forecastGDB + "\\DirectGroup300_315")

                dir315_330 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 315')
                arcpy.SelectLayerByAttribute_management(dir315_330, "SUBSET_SELECTION", '"windDir_D1" <= 330')
                arcpy.CopyFeatures_management(dir315_330, forecastGDB + "\\DirectGroup315_330")

                dir330_345 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 330')
                arcpy.SelectLayerByAttribute_management(dir330_345, "SUBSET_SELECTION", '"windDir_D1" <= 345')
                arcpy.CopyFeatures_management(dir330_345, forecastGDB + "\\DirectGroup330_345")

                dir345_360 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D1" > 345')
                arcpy.SelectLayerByAttribute_management(dir345_360, "SUBSET_SELECTION", '"windDir_D1" <= 360')
                arcpy.CopyFeatures_management(dir345_360, forecastGDB + "\\DirectGroup345_360")
                print("direction group shapefiles made")
            except Exception as ex:
                print(ex)

            arcpy.env.workspace = forecastGDB
            files = arcpy.ListFeatureClasses()
            for file in files:
                if file.startswith("DirectGroup"):
                    if int(arcpy.GetCount_management(file).getOutput(0)) <= 0:
                        arcpy.Delete_management(file)

            arcpy.env.workspace = forecastGDB
            files = arcpy.ListFeatureClasses()
            for file in files:
                if file.startswith("DirectGroup"):
                    if file.endswith("0_15"):
                        Reclassify0_15 = Reclassify(aspect_clipped, "Value", RemapRange([[330, 360, 1], [0, 15, 1], [15, 45, 1], [45, 330, "NODATA"]]))
                        Reclassify0_15.save(forecastGDB + "\\AspectReclass_0_15")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass_0_15",
                                                         forecastGDB + "\\AspectWindDir0_15")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir0_15", AvyPaths,
                                            forecastGDB + "\\AspectWindDir0_15_Clip")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir0_15_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_0_15")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir0_15")

                    if file.endswith("15_30"):
                        Reclassify15_30 = Reclassify(aspect_clipped, "Value", RemapRange([[345, 360, 1], [0, 15, 1], [15, 60, 1], [60, 345, "NODATA"]]))
                        Reclassify15_30.save(forecastGDB + "\\AspectReclass_15_30")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass_15_30",
                                                         forecastGDB + "\\AspectWindDir15_30")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir15_30", AvyPaths,
                                            forecastGDB + "\\AspectWindDir0_15_30_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir15_30")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir0_15_30_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_15_30")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")

                    if file.endswith("30_45"):
                        Reclassify30_45 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 30, 1], [30, 45, 1], [45, 75, 1], [75, 360, "NODATA"]]))
                        Reclassify30_45.save(forecastGDB + "\\AspectReclass_30_45")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass_30_45",
                                                         forecastGDB + "\\AspectWindDir30_45")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir30_45", AvyPaths,
                                            forecastGDB + "\\AspectWindDir30_45_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir30_45")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir30_45_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_30_45")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("45_60"):
                        Reclassify45_60 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 15, "NODATA"], [15, 45, 1], [45, 60, 1], [60, 90, 1], [90, 360, "NODATA"]]))
                        Reclassify45_60.save(forecastGDB + "\\AspectReclass_45_60")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass_45_60",
                                                         forecastGDB + "\\AspectWindDir45_60")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir45_60", AvyPaths,
                                            forecastGDB + "\\AspectWindDir45_60_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir45_60")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir45_60_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_45_60")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("60_75"):
                        Reclassify60_75 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 30, "NODATA"], [30, 60, 1], [60, 75, 1], [75, 105, 1], [105, 360, "NODATA"]]))
                        Reclassify60_75.save(forecastGDB + "\\AspectReclass60_75")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass60_75",
                                                         forecastGDB + "\\AspectWindDir60_75")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir60_75", AvyPaths,
                                            forecastGDB + "\\AspectWindDir60_75_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir60_75")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir60_75_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_60_75")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("75_90"):
                        Reclassify75_90 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 45, "NODATA"], [45, 75, 1], [75, 90, 1], [90, 120, 1], [120, 360, "NODATA"]]))
                        Reclassify75_90.save(forecastGDB + "\\AspectReclass75_90")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass75_90",
                                                         forecastGDB + "\\AspectWindDir75_90")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir75_90", AvyPaths,
                                            forecastGDB + "\\AspectWindDir75_90_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir75_90")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir75_90_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_75_90")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("90_105"):
                        Reclassify90_105 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 60, "NODATA"], [60, 90, 1], [90, 105, 1], [105, 135, 1], [135, 360, "NODATA"]]))
                        Reclassify90_105.save(forecastGDB + "\\AspectReclass90_105")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass90_105",
                                                         forecastGDB + "\\AspectWindDir90_105")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir90_105", AvyPaths,
                                            forecastGDB + "\\AspectWindDir90_105_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir90_105")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir90_105_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_90_105")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("105_120"):
                        Reclassify105_120 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 75, "NODATA"], [75, 105, 1], [105, 120, 1], [120, 150, 1], [150, 360, "NODATA"]]))
                        Reclassify105_120.save(forecastGDB + "\\AspectReclass105_120")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass105_120",
                                                         forecastGDB + "\\AspectWindDir105_120")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir105_120", AvyPaths,
                                            forecastGDB + "\\AspectWindDir105_120_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir105_120")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir105_120_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_105_120")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("120_135"):
                        Reclassify120_135 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 90, "NODATA"], [90, 120, 1], [120, 135, 1], [135, 165, 1], [165, 360, "NODATA"]]))
                        Reclassify120_135.save(forecastGDB + "\\AspectReclass120_135")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass120_135",
                                                         forecastGDB + "\\AspectWindDir120_135")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir120_135", AvyPaths,
                                            forecastGDB + "\\AspectWindDir120_135_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir120_135")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir120_135_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_120_135")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("135_150"):
                        Reclassify135_150 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 105, "NODATA"], [105, 135, 1], [135, 150, 1], [150, 180, 1], [180, 360, "NODATA"]]))
                        Reclassify135_150.save(forecastGDB + "\\AspectReclass135_150")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass135_150",
                                                         forecastGDB + "\\AspectWindDir135_150")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir135_150", AvyPaths,
                                            forecastGDB + "\\AspectWindDir135_150_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir135_150")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir135_150_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_135_150")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("150_165"):
                        Reclassify150_165 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 120, "NODATA"], [120, 150, 1], [150, 165, 1], [165, 195, 1], [195, 360, "NODATA"]]))
                        Reclassify150_165.save(forecastGDB + "\\AspectReclass150_165")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass150_165",
                                                         forecastGDB + "\\AspectWindDir150_165")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir150_165", AvyPaths,
                                            forecastGDB + "\\AspectWindDir150_165_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir150_165")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir150_165_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_150_165")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("165_180"):
                        Reclassify165_180 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 135, "NODATA"], [135, 165, 1], [165, 180, 1], [180, 210, 1], [210, 360, "NODATA"]]))
                        Reclassify165_180.save(forecastGDB + "\\AspectReclass165_180")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass165_180",
                                                         forecastGDB + "\\AspectWindDir165_180")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir165_180", AvyPaths,
                                            forecastGDB + "\\AspectWindDir165_180_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir165_180")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir165_180_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_165_180")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("180_195"):
                        Reclassify180_195 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 150, "NODATA"], [150, 180, 1], [180, 195, 1], [195, 225, 1], [225, 360, "NODATA"]]))
                        Reclassify180_195.save(forecastGDB + "\\AspectReclass180_195")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass180_195",
                                                         forecastGDB + "\\AspectWindDir180_195")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir180_195", AvyPaths,
                                            forecastGDB + "\\AspectWindDir180_195_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir180_195")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir180_195_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_180_195")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("195_210"):
                        Reclassify195_210 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 165, "NODATA"], [165, 195, 1], [195, 210, 1], [210, 240, 1], [240, 360, "NODATA"]]))
                        Reclassify195_210.save(forecastGDB + "\\AspectReclass195_210")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass195_210",
                                                         forecastGDB + "\\AspectWindDir195_210")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir195_210", AvyPaths,
                                            forecastGDB + "\\AspectWindDir195_210_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir195_210")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir195_210_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_195_210")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("210_225"):
                        Reclassify210_225 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 180, "NODATA"], [180, 210, 1], [210, 225, 1], [225, 255, 1], [255, 360, "NODATA"]]))
                        Reclassify210_225.save(forecastGDB + "\\AspectReclass210_225")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass210_225",
                                                         forecastGDB + "\\AspectWindDir210_225")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir210_225", AvyPaths,
                                            forecastGDB + "\\AspectWindDir210_225_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir210_225")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir210_225_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_210_225")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("225_240"):
                        Reclassify225_240 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 195, "NODATA"], [195, 225, 1], [225, 240, 1], [240, 270, 1], [270, 360, "NODATA"]]))
                        Reclassify225_240.save(forecastGDB + "\\AspectReclass225_240")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass225_240",
                                                         forecastGDB + "\\AspectWindDir225_240")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir225_240", AvyPaths,
                                            forecastGDB + "\\AspectWindDir225_240_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir225_240")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir225_240_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_225_240")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("240_255"):
                        Reclassify240_255 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 210, "NODATA"], [210, 240, 1], [240, 255, 1], [255, 285, 1], [285, 360, "NODATA"]]))
                        Reclassify240_255.save(forecastGDB + "\\AspectReclass240_255")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass240_255",
                                                         forecastGDB + "\\AspectWindDir240_255")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir240_255", AvyPaths,
                                            forecastGDB + "\\AspectWindDir240_255_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir240_255")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir240_255_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_240_255")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("255_270"):
                        Reclassify255_270 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 225, "NODATA"], [225, 255, 1], [255, 270, 1], [270, 300, 1], [300, 360, "NODATA"]]))
                        Reclassify255_270.save(forecastGDB + "\\AspectReclass255_270")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass255_270",
                                                         forecastGDB + "\\AspectWindDir255_270")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir255_270", AvyPaths,
                                            forecastGDB + "\\AspectWindDir255_270_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir255_270")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir255_270_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_255_270")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("270_285"):
                        Reclassify270_285 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 240, "NODATA"], [240, 270, 1], [270, 285, 1], [285, 315, 1], [315, 360, "NODATA"]]))
                        Reclassify270_285.save(forecastGDB + "\\AspectReclass270_285")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass270_285",
                                                         forecastGDB + "\\AspectWindDir270_285")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir270_285", AvyPaths,
                                            forecastGDB + "\\AspectWindDir270_285_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir270_285")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir270_285_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_270_285")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("285_300"):
                        Reclassify285_300 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 255, "NODATA"], [255, 285, 1], [285, 300, 1], [300, 330, 1], [330, 360, "NODATA"]]))
                        Reclassify285_300.save(forecastGDB + "\\AspectReclass285_300")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass285_300",
                                                         forecastGDB + "\\AspectWindDir285_300")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir285_300", AvyPaths,
                                            forecastGDB + "\\AspectWindDir285_300_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir285_300")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir285_300_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_285_300")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("300_315"):
                        Reclassify300_315 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 270, "NODATA"], [270, 300, 1], [300, 315, 1], [315, 345, 1], [345, 360, "NODATA"]]))
                        Reclassify300_315.save(forecastGDB + "\\AspectReclass300_315")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass300_315",
                                                         forecastGDB + "\\AspectWindDir300_315")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir300_315", AvyPaths,
                                            forecastGDB + "\\AspectWindDir300_315_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir300_315")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir300_315_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_300_315")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("315_330"):
                        Reclassify315_330 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 285, "NODATA"], [285, 315, 1], [315, 330, 1], [330, 360, 1]]))
                        Reclassify315_330.save(forecastGDB + "\\AspectReclass315_330")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass315_330",
                                                         forecastGDB + "\\AspectWindDir315_330")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir315_330", AvyPaths,
                                            forecastGDB + "\\AspectWindDir315_330_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir315_330")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir315_330_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_315_330")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")

                    if file.endswith("330_345"):
                        Reclassify330_345 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 15, 1], [15, 300, "NODATA"], [300, 330, 1], [330, 345, 1], [345, 360, 1]]))
                        Reclassify330_345.save(forecastGDB + "\\AspectReclass330_345")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass330_345",
                                                         forecastGDB + "\\AspectWindDir330_345")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir330_345", AvyPaths,
                                            forecastGDB + "\\AspectWindDir330_345_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir330_345")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir330_345_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_330_345")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")

                    if file.endswith("345_360"):
                        Reclassify345_360 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 30, 1], [30, 315, "NODATA"], [315, 345, 1], [345, 360, 1]]))
                        Reclassify345_360.save(forecastGDB + "\\AspectReclass345_360")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass345_360",
                                                         forecastGDB + "\\AspectWindDir345_360")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir345_360", AvyPaths,
                                            forecastGDB + "\\AspectWindDir345_360_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir345_360")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir345_360_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day1_345_360")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")

            arcpy.env.workspace = forecastGDB
            files = arcpy.ListRasters()
            shapefiles = arcpy.ListFeatureClasses()
            lists = arcpy.ListFeatureClasses("AtRiskAspect_Day1*")
            for file in files:
                if file.startswith("AspectReclass"):
                    arcpy.Delete_management(file)
            print("empty files deleted")
            for shape in shapefiles:
                if shape.endswith("Clip"):
                    arcpy.Delete_management(shape)
            arcpy.Merge_management(lists, os.path.join(forecastGDB, "Merged_Day1AtRiskAspects"))
            for shape in shapefiles:
                if shape.startswith("AtRiskAspect_Day1"):
                    arcpy.Delete_management(shape)
                if shape.startswith("DirectGroup"):
                    arcpy.Delete_management(shape)
        except Exception as ex:
            print(ex)

        try:
            VarPaths = arcpy.SelectLayerByAttribute_management(forecastGDB + "\\CoefficientFile", "NEW_SELECTION",
                                                               '"CoEF_D1" > 0')
            arcpy.CopyFeatures_management(VarPaths, forecastGDB + "\\HighVariablePaths")
            print("path selection created for variable")

            leewardPathsD0 = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS",
                                                                    forecastGDB + "\\Merged_Day1AtRiskAspects", "",
                                                                    "NEW_SELECTION")
            arcpy.CopyFeatures_management(leewardPathsD0, forecastGDB + "\\LeewardDay1Paths")
            print("leeward paths selected")

            atRiskPaths = arcpy.SelectLayerByLocation_management(forecastGDB + "\\LeewardDay1Paths", "CONTAINS",
                                                                 forecastGDB + "\\HighVariablePaths", "", "NEW_SELECTION")
            arcpy.CopyFeatures_management(atRiskPaths, forecastGDB + "\\Day1_AtRiskPaths")

            arcpy.JoinField_management(forecastGDB + "\\Day1_AtRiskPaths", "pathCode", forecastGDB + "\\HighVariablePaths",
                                       "pathCode", ["CoEF_D1", "CE_IndexD1"])
        except Exception as ex:
            print(ex)
    except Exception as ex:
        print(ex)

    print("Day 2 at-risk aspects")
    try:
        try:
            # copy field to variable coefficient field
            arcpy.AddField_management(forecastGDB + "\\CoefficientFile", "CoEf_D2", "DOUBLE", "", "", "", "CoEf_D2")
            print("field added")
            arcpy.AddField_management(forecastGDB + "\\CoefficientFile", "CE_IndexD2", "DOUBLE", "", "", "", "CE_IndexD2")
            print("field added")
            # run update cursor to establish values:
            with arcpy.da.UpdateCursor(forecastGDB + "\\CoefficientFile",
                                       ["asnow_D2", "wind_D2", "gust_D2", "snowc_D2", "CoEf_D2", "CE_IndexD2"]) as cursor:
                for row in cursor:
                    if row[0] > 0 and row[1] >= 4:
                        row[4] = (4.72027 * ((float(row[0])) / 3.17009)) + (6.33583 * ((float(row[1])) / 9.256787)) + (
                                    8.79018 * ((float(row[2])) / 20.646002))
                        cursor.updateRow(row)
                        row[5] = float(row[4]) / 17.27596

                        cursor.updateRow(row)
                    else:
                        row[4] = 5
                        row[5] = 5
                    cursor.updateRow(row)
        except Exception as ex:
            print(ex)

        try:
            aspect = avyGDB + "\\Aspect_Clipped"
            aspect_clipped = forecastGDB + "\\aspect_paths"
            arcpy.Clip_management(aspect, AvyPaths, aspect_clipped)
            # make wind dir file
            featureClass = forecastGDB + "\\WindGustSnow_All"
            try:
                dir0_15 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 0')
                arcpy.SelectLayerByAttribute_management(dir0_15, "SUBSET_SELECTION", '"windDir_D2" <= 15')
                arcpy.CopyFeatures_management(dir0_15, forecastGDB + "\\DirectGroup0_15")

                dir15_30 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 15')
                arcpy.SelectLayerByAttribute_management(dir15_30, "SUBSET_SELECTION", '"windDir_D2" <= 30')
                arcpy.CopyFeatures_management(dir15_30, forecastGDB + "\\DirectGroup15_30")

                dir30_45 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 30')
                arcpy.SelectLayerByAttribute_management(dir30_45, "SUBSET_SELECTION", '"windDir_D2" <= 45')
                arcpy.CopyFeatures_management(dir30_45, forecastGDB + "\\DirectGroup30_45")

                dir45_60 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 45')
                arcpy.SelectLayerByAttribute_management(dir45_60, "SUBSET_SELECTION", '"windDir_D2" <= 60')
                arcpy.CopyFeatures_management(dir45_60, forecastGDB + "\\DirectGroup45_60")

                dir60_75 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 60')
                arcpy.SelectLayerByAttribute_management(dir60_75, "SUBSET_SELECTION", '"windDir_D2" <= 75')
                arcpy.CopyFeatures_management(dir60_75, forecastGDB + "\\DirectGroup60_75")

                dir75_90 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 75')
                arcpy.SelectLayerByAttribute_management(dir75_90, "SUBSET_SELECTION", '"windDir_D2" <= 90')
                arcpy.CopyFeatures_management(dir75_90, forecastGDB + "\\DirectGroup75_90")

                dir90_105 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 90')
                arcpy.SelectLayerByAttribute_management(dir90_105, "SUBSET_SELECTION", '"windDir_D2" <= 105')
                arcpy.CopyFeatures_management(dir90_105, forecastGDB + "\\DirectGroup90_105")

                dir105_120 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 105')
                arcpy.SelectLayerByAttribute_management(dir105_120, "SUBSET_SELECTION", '"windDir_D2" <= 120')
                arcpy.CopyFeatures_management(dir105_120, forecastGDB + "\\DirectGroup105_120")

                dir120_135 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 120')
                arcpy.SelectLayerByAttribute_management(dir120_135, "SUBSET_SELECTION", '"windDir_D2" <= 135')
                arcpy.CopyFeatures_management(dir120_135, forecastGDB + "\\DirectGroup120_135")

                dir135_150 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 135')
                arcpy.SelectLayerByAttribute_management(dir135_150, "SUBSET_SELECTION", '"windDir_D2" <= 150')
                arcpy.CopyFeatures_management(dir135_150, forecastGDB + "\\DirectGroup135_150")

                dir150_165 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 150')
                arcpy.SelectLayerByAttribute_management(dir150_165, "SUBSET_SELECTION", '"windDir_D2" <= 165')
                arcpy.CopyFeatures_management(dir150_165, forecastGDB + "\\DirectGroup150_165")

                dir165_180 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 165')
                arcpy.SelectLayerByAttribute_management(dir165_180, "SUBSET_SELECTION", '"windDir_D2" <= 180')
                arcpy.CopyFeatures_management(dir165_180, forecastGDB + "\\DirectGroup165_180")

                dir180_195 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 180')
                arcpy.SelectLayerByAttribute_management(dir180_195, "SUBSET_SELECTION", '"windDir_D2" <= 195')
                arcpy.CopyFeatures_management(dir180_195, forecastGDB + "\\DirectGroup180_195")

                dir195_210 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 195')
                arcpy.SelectLayerByAttribute_management(dir195_210, "SUBSET_SELECTION", '"windDir_D2" <= 210')
                arcpy.CopyFeatures_management(dir195_210, forecastGDB + "\\DirectGroup195_210")

                dir210_225 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 210')
                arcpy.SelectLayerByAttribute_management(dir210_225, "SUBSET_SELECTION", '"windDir_D2" <= 225')
                arcpy.CopyFeatures_management(dir210_225, forecastGDB + "\\DirectGroup210_225")

                dir225_240 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 225')
                arcpy.SelectLayerByAttribute_management(dir225_240, "SUBSET_SELECTION", '"windDir_D2" <= 240')
                arcpy.CopyFeatures_management(dir225_240, forecastGDB + "\\DirectGroup225_240")

                dir240_255 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 240')
                arcpy.SelectLayerByAttribute_management(dir240_255, "SUBSET_SELECTION", '"windDir_D2" <= 255')
                arcpy.CopyFeatures_management(dir240_255, forecastGDB + "\\DirectGroup240_255")

                dir255_270 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 255')
                arcpy.SelectLayerByAttribute_management(dir255_270, "SUBSET_SELECTION", '"windDir_D2" <= 270')
                arcpy.CopyFeatures_management(dir255_270, forecastGDB + "\\DirectGroup255_270")

                dir270_285 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 270')
                arcpy.SelectLayerByAttribute_management(dir270_285, "SUBSET_SELECTION", '"windDir_D2" <= 285')
                arcpy.CopyFeatures_management(dir270_285, forecastGDB + "\\DirectGroup270_285")

                dir285_300 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 285')
                arcpy.SelectLayerByAttribute_management(dir285_300, "SUBSET_SELECTION", '"windDir_D2" <= 300')
                arcpy.CopyFeatures_management(dir285_300, forecastGDB + "\\DirectGroup285_300")

                dir300_315 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 300')
                arcpy.SelectLayerByAttribute_management(dir300_315, "SUBSET_SELECTION", '"windDir_D2" <= 315')
                arcpy.CopyFeatures_management(dir300_315, forecastGDB + "\\DirectGroup300_315")

                dir315_330 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 315')
                arcpy.SelectLayerByAttribute_management(dir315_330, "SUBSET_SELECTION", '"windDir_D2" <= 330')
                arcpy.CopyFeatures_management(dir315_330, forecastGDB + "\\DirectGroup315_330")

                dir330_345 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 330')
                arcpy.SelectLayerByAttribute_management(dir330_345, "SUBSET_SELECTION", '"windDir_D2" <= 345')
                arcpy.CopyFeatures_management(dir330_345, forecastGDB + "\\DirectGroup330_345")

                dir345_360 = arcpy.SelectLayerByAttribute_management(featureClass, "NEW_SELECTION", '"windDir_D2" > 345')
                arcpy.SelectLayerByAttribute_management(dir345_360, "SUBSET_SELECTION", '"windDir_D2" <= 360')
                arcpy.CopyFeatures_management(dir345_360, forecastGDB + "\\DirectGroup345_360")
                print("direction group shapefiles made")
            except Exception as ex:
                print(ex)

            arcpy.env.workspace = forecastGDB
            files = arcpy.ListFeatureClasses()
            for file in files:
                if file.startswith("DirectGroup"):
                    if int(arcpy.GetCount_management(file).getOutput(0)) <= 0:
                        arcpy.Delete_management(file)

            arcpy.env.workspace = forecastGDB
            files = arcpy.ListFeatureClasses()
            for file in files:
                if file.startswith("DirectGroup"):
                    if file.endswith("0_15"):
                        Reclassify0_15 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[330, 360, 1], [0, 15, 1], [15, 45, 1], [45, 330, "NODATA"]]))
                        Reclassify0_15.save(forecastGDB + "\\AspectReclass_0_15")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass_0_15",
                                                         forecastGDB + "\\AspectWindDir0_15")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir0_15", AvyPaths,
                                            forecastGDB + "\\AspectWindDir0_15_Clip")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir0_15_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_0_15")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir0_15")

                    if file.endswith("15_30"):
                        Reclassify15_30 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[345, 360, 1], [0, 15, 1], [15, 60, 1], [60, 345, "NODATA"]]))
                        Reclassify15_30.save(forecastGDB + "\\AspectReclass_15_30")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass_15_30",
                                                         forecastGDB + "\\AspectWindDir15_30")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir15_30", AvyPaths,
                                            forecastGDB + "\\AspectWindDir0_15_30_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir15_30")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir0_15_30_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_15_30")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")

                    if file.endswith("30_45"):
                        Reclassify30_45 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 30, 1], [30, 45, 1], [45, 75, 1], [75, 360, "NODATA"]]))
                        Reclassify30_45.save(forecastGDB + "\\AspectReclass_30_45")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass_30_45",
                                                         forecastGDB + "\\AspectWindDir30_45")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir30_45", AvyPaths,
                                            forecastGDB + "\\AspectWindDir30_45_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir30_45")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir30_45_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_30_45")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("45_60"):
                        Reclassify45_60 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 15, "NODATA"], [15, 45, 1], [45, 60, 1], [60, 90, 1], [90, 360, "NODATA"]]))
                        Reclassify45_60.save(forecastGDB + "\\AspectReclass_45_60")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass_45_60",
                                                         forecastGDB + "\\AspectWindDir45_60")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir45_60", AvyPaths,
                                            forecastGDB + "\\AspectWindDir45_60_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir45_60")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir45_60_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_45_60")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("60_75"):
                        Reclassify60_75 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 30, "NODATA"], [30, 60, 1], [60, 75, 1], [75, 105, 1], [105, 360, "NODATA"]]))
                        Reclassify60_75.save(forecastGDB + "\\AspectReclass60_75")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass60_75",
                                                         forecastGDB + "\\AspectWindDir60_75")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir60_75", AvyPaths,
                                            forecastGDB + "\\AspectWindDir60_75_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir60_75")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir60_75_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_60_75")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("75_90"):
                        Reclassify75_90 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 45, "NODATA"], [45, 75, 1], [75, 90, 1], [90, 120, 1], [120, 360, "NODATA"]]))
                        Reclassify75_90.save(forecastGDB + "\\AspectReclass75_90")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass75_90",
                                                         forecastGDB + "\\AspectWindDir75_90")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir75_90", AvyPaths,
                                            forecastGDB + "\\AspectWindDir75_90_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir75_90")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir75_90_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_75_90")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("90_105"):
                        Reclassify90_105 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 60, "NODATA"], [60, 90, 1], [90, 105, 1], [105, 135, 1], [135, 360, "NODATA"]]))
                        Reclassify90_105.save(forecastGDB + "\\AspectReclass90_105")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass90_105",
                                                         forecastGDB + "\\AspectWindDir90_105")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir90_105", AvyPaths,
                                            forecastGDB + "\\AspectWindDir90_105_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir90_105")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir90_105_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_90_105")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("105_120"):
                        Reclassify105_120 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 75, "NODATA"], [75, 105, 1], [105, 120, 1], [120, 150, 1], [150, 360, "NODATA"]]))
                        Reclassify105_120.save(forecastGDB + "\\AspectReclass105_120")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass105_120",
                                                         forecastGDB + "\\AspectWindDir105_120")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir105_120", AvyPaths,
                                            forecastGDB + "\\AspectWindDir105_120_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir105_120")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir105_120_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_105_120")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("120_135"):
                        Reclassify120_135 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 90, "NODATA"], [90, 120, 1], [120, 135, 1], [135, 165, 1], [165, 360, "NODATA"]]))
                        Reclassify120_135.save(forecastGDB + "\\AspectReclass120_135")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass120_135",
                                                         forecastGDB + "\\AspectWindDir120_135")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir120_135", AvyPaths,
                                            forecastGDB + "\\AspectWindDir120_135_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir120_135")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir120_135_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_120_135")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("135_150"):
                        Reclassify135_150 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 105, "NODATA"], [105, 135, 1], [135, 150, 1], [150, 180, 1], [180, 360, "NODATA"]]))
                        Reclassify135_150.save(forecastGDB + "\\AspectReclass135_150")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass135_150",
                                                         forecastGDB + "\\AspectWindDir135_150")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir135_150", AvyPaths,
                                            forecastGDB + "\\AspectWindDir135_150_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir135_150")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir135_150_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_135_150")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("150_165"):
                        Reclassify150_165 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 120, "NODATA"], [120, 150, 1], [150, 165, 1], [165, 195, 1], [195, 360, "NODATA"]]))
                        Reclassify150_165.save(forecastGDB + "\\AspectReclass150_165")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass150_165",
                                                         forecastGDB + "\\AspectWindDir150_165")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir150_165", AvyPaths,
                                            forecastGDB + "\\AspectWindDir150_165_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir150_165")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir150_165_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_150_165")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("165_180"):
                        Reclassify165_180 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 135, "NODATA"], [135, 165, 1], [165, 180, 1], [180, 210, 1], [210, 360, "NODATA"]]))
                        Reclassify165_180.save(forecastGDB + "\\AspectReclass165_180")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass165_180",
                                                         forecastGDB + "\\AspectWindDir165_180")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir165_180", AvyPaths,
                                            forecastGDB + "\\AspectWindDir165_180_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir165_180")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir165_180_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_165_180")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("180_195"):
                        Reclassify180_195 = Reclassify(aspect_clipped, "Value", RemapRange([[0, 150, "NODATA"], [150, 180, 1], [180, 195, 1], [195, 225, 1], [225, 360, "NODATA"]]))
                        Reclassify180_195.save(forecastGDB + "\\AspectReclass180_195")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass180_195",
                                                         forecastGDB + "\\AspectWindDir180_195")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir180_195", AvyPaths,
                                            forecastGDB + "\\AspectWindDir180_195_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir180_195")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir180_195_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_180_195")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("195_210"):
                        Reclassify195_210 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 165, "NODATA"], [165, 195, 1], [195, 210, 1], [210, 240, 1], [240, 360, "NODATA"]]))
                        Reclassify195_210.save(forecastGDB + "\\AspectReclass195_210")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass195_210",
                                                         forecastGDB + "\\AspectWindDir195_210")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir195_210", AvyPaths,
                                            forecastGDB + "\\AspectWindDir195_210_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir195_210")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir195_210_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_195_210")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("210_225"):
                        Reclassify210_225 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 180, "NODATA"], [180, 210, 1], [210, 225, 1], [225, 255, 1], [255, 360, "NODATA"]]))
                        Reclassify210_225.save(forecastGDB + "\\AspectReclass210_225")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass210_225",
                                                         forecastGDB + "\\AspectWindDir210_225")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir210_225", AvyPaths,
                                            forecastGDB + "\\AspectWindDir210_225_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir210_225")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir210_225_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_210_225")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("225_240"):
                        Reclassify225_240 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 195, "NODATA"], [195, 225, 1], [225, 240, 1], [240, 270, 1], [270, 360, "NODATA"]]))
                        Reclassify225_240.save(forecastGDB + "\\AspectReclass225_240")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass225_240",
                                                         forecastGDB + "\\AspectWindDir225_240")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir225_240", AvyPaths,
                                            forecastGDB + "\\AspectWindDir225_240_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir225_240")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir225_240_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_225_240")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("240_255"):
                        Reclassify240_255 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 210, "NODATA"], [210, 240, 1], [240, 255, 1], [255, 285, 1], [285, 360, "NODATA"]]))
                        Reclassify240_255.save(forecastGDB + "\\AspectReclass240_255")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass240_255",
                                                         forecastGDB + "\\AspectWindDir240_255")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir240_255", AvyPaths,
                                            forecastGDB + "\\AspectWindDir240_255_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir240_255")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir240_255_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_240_255")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("255_270"):
                        Reclassify255_270 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 225, "NODATA"], [225, 255, 1], [255, 270, 1], [270, 300, 1], [300, 360, "NODATA"]]))
                        Reclassify255_270.save(forecastGDB + "\\AspectReclass255_270")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass255_270",
                                                         forecastGDB + "\\AspectWindDir255_270")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir255_270", AvyPaths,
                                            forecastGDB + "\\AspectWindDir255_270_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir255_270")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir255_270_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_255_270")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("270_285"):
                        Reclassify270_285 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 240, "NODATA"], [240, 270, 1], [270, 285, 1], [285, 315, 1], [315, 360, "NODATA"]]))
                        Reclassify270_285.save(forecastGDB + "\\AspectReclass270_285")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass270_285",
                                                         forecastGDB + "\\AspectWindDir270_285")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir270_285", AvyPaths,
                                            forecastGDB + "\\AspectWindDir270_285_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir270_285")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir270_285_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_270_285")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("285_300"):
                        Reclassify285_300 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 255, "NODATA"], [255, 285, 1], [285, 300, 1], [300, 330, 1], [330, 360, "NODATA"]]))
                        Reclassify285_300.save(forecastGDB + "\\AspectReclass285_300")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass285_300",
                                                         forecastGDB + "\\AspectWindDir285_300")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir285_300", AvyPaths,
                                            forecastGDB + "\\AspectWindDir285_300_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir285_300")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir285_300_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_285_300")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("300_315"):
                        Reclassify300_315 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 270, "NODATA"], [270, 300, 1], [300, 315, 1], [315, 345, 1], [345, 360, "NODATA"]]))
                        Reclassify300_315.save(forecastGDB + "\\AspectReclass300_315")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass300_315",
                                                         forecastGDB + "\\AspectWindDir300_315")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir300_315", AvyPaths,
                                            forecastGDB + "\\AspectWindDir300_315_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir300_315")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir300_315_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_300_315")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")
                    if file.endswith("315_330"):
                        Reclassify315_330 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 285, "NODATA"], [285, 315, 1], [315, 330, 1], [330, 360, 1]]))
                        Reclassify315_330.save(forecastGDB + "\\AspectReclass315_330")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass315_330",
                                                         forecastGDB + "\\AspectWindDir315_330")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir315_330", AvyPaths,
                                            forecastGDB + "\\AspectWindDir315_330_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir315_330")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir315_330_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_315_330")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")

                    if file.endswith("330_345"):
                        Reclassify330_345 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 15, 1], [15, 300, "NODATA"], [300, 330, 1], [330, 345, 1], [345, 360, 1]]))
                        Reclassify330_345.save(forecastGDB + "\\AspectReclass330_345")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass330_345",
                                                         forecastGDB + "\\AspectWindDir330_345")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir330_345", AvyPaths,
                                            forecastGDB + "\\AspectWindDir330_345_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir330_345")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir330_345_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_330_345")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")

                    if file.endswith("345_360"):
                        Reclassify345_360 = Reclassify(aspect_clipped, "Value", RemapRange(
                            [[0, 30, 1], [30, 315, "NODATA"], [315, 345, 1], [345, 360, 1]]))
                        Reclassify345_360.save(forecastGDB + "\\AspectReclass345_360")
                        arcpy.RasterToPolygon_conversion(forecastGDB + "\\AspectReclass345_360",
                                                         forecastGDB + "\\AspectWindDir345_360")
                        arcpy.Clip_analysis(forecastGDB + "\\AspectWindDir345_360", AvyPaths,
                                            forecastGDB + "\\AspectWindDir345_360_Clip")
                        arcpy.Delete_management(forecastGDB + "\\AspectWindDir345_360")
                        pathSelect = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS", file, "",
                                                                            "NEW_SELECTION")
                        arcpy.CopyFeatures_management(pathSelect, forecastGDB + "\\TempPaths")
                        AspectSelect = arcpy.SelectLayerByLocation_management(forecastGDB + "\\AspectWindDir345_360_Clip",
                                                                              "WITHIN", forecastGDB + "\\TempPaths", "",
                                                                              "NEW_SELECTION")
                        arcpy.CopyFeatures_management(AspectSelect, forecastGDB + "\\AtRiskAspect_Day2_345_360")
                        arcpy.Delete_management(forecastGDB + "\\TempPaths")

            arcpy.env.workspace = forecastGDB
            files = arcpy.ListRasters()
            shapefiles = arcpy.ListFeatureClasses()
            lists = arcpy.ListFeatureClasses("AtRiskAspect_Day2*")
            for file in files:
                if file.startswith("AspectReclass"):
                    arcpy.Delete_management(file)
            print("empty files deleted")
            for shape in shapefiles:
                if shape.endswith("Clip"):
                    arcpy.Delete_management(shape)
            arcpy.Merge_management(lists, os.path.join(forecastGDB, "Merged_Day2AtRiskAspects"))
            for shape in shapefiles:
                if shape.startswith("AtRiskAspect_Day2"):
                    arcpy.Delete_management(shape)
                if shape.startswith("DirectGroup"):
                    arcpy.Delete_management(shape)
        except Exception as ex:
            print(ex)

        try:
            VarPaths = arcpy.SelectLayerByAttribute_management(forecastGDB + "\\CoefficientFile", "NEW_SELECTION",
                                                               '"CoEF_D2" > 0')
            arcpy.CopyFeatures_management(VarPaths, forecastGDB + "\\HighVariablePaths")
            print("path selection created for variable")

            leewardPathsD0 = arcpy.SelectLayerByLocation_management(AvyPaths, "CONTAINS",
                                                                    forecastGDB + "\\Merged_Day2AtRiskAspects", "",
                                                                    "NEW_SELECTION")
            arcpy.CopyFeatures_management(leewardPathsD0, forecastGDB + "\\LeewardDay2Paths")
            print("leeward paths selected")

            atRiskPaths = arcpy.SelectLayerByLocation_management(forecastGDB + "\\LeewardDay2Paths", "CONTAINS",
                                                                 forecastGDB + "\\HighVariablePaths", "", "NEW_SELECTION")
            arcpy.CopyFeatures_management(atRiskPaths, forecastGDB + "\\Day2_AtRiskPaths")

            arcpy.JoinField_management(forecastGDB + "\\Day2_AtRiskPaths", "pathCode", forecastGDB + "\\HighVariablePaths",
                                       "pathCode", ["CoEF_D2", "CE_IndexD2"])
        except Exception as ex:
            print(ex)
    except Exception as ex:
        print(ex)

    try:

        arcpy.CountOverlappingFeatures_analysis([forecastGDB + "\\Day0_AtRiskPaths", forecastGDB + "\\Day1_AtRiskPaths",
                                                 forecastGDB + "\\Day2_AtRiskPaths"], forecastGDB + "\\At_RiskOverlaping")

        arcpy.Delete_management([forecastGDB + "\\snowData_All", forecastGDB + "\\WindDirData_All",
                                 forecastGDB + "\\WindGustSnow_All", forecastGDB + "\\WindGustSnowCover_All",
                                 forecastGDB + "\\WindSpeed_DataAll"])
    except Exception as ex:
        print(ex)

except Exception as ex:
    print(ex)
